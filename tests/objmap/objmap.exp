Error ------------------------------------------------------------------------------------------------- identity.js:18:6

Cannot cast object literal to `Foo` because string [1] is incompatible with number [2] in property `a`.
[incompatible-cast]

   identity.js:18:6
   18|   a: 'asd', // Error: string ~> number
            ^^^^^ [1]

References:
   identity.js:5:8
    5|     a: number,
              ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- identity.js:19:6

Cannot cast object literal to `Foo` because string [1] is incompatible with number [2] in property `b`.
[incompatible-cast]

   identity.js:19:6
   19|   b: 'asd', // Error: string ~> number
            ^^^^^ [1]

References:
   identity.js:6:8
    6|     b: number,
              ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- identity.js:23:6

Cannot cast `any` to `Foo` because string [1] is incompatible with number [2] in property `a`. [incompatible-cast]

   identity.js:23:6
   23|   a: string, // Error: string ~> number
            ^^^^^^ [1]

References:
   identity.js:5:8
    5|     a: number,
              ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- identity.js:24:6

Cannot cast `any` to `Foo` because string [1] is incompatible with number [2] in property `b`. [incompatible-cast]

   identity.js:24:6
   24|   b: string, // Error: string ~> number
            ^^^^^^ [1]

References:
   identity.js:6:8
    6|     b: number,
              ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- identity.js:27:7

Cannot cast object literal to `Foo` because property `a` is missing in object type [1] but exists in object type [2].
[prop-missing]

   identity.js:27:7
   27| (({}: {}): Foo); // Error: `a` and `b` are not defined.
             ^^ [1]

References:
   identity.js:27:12
   27| (({}: {}): Foo); // Error: `a` and `b` are not defined.
                  ^^^ [2]


Error ------------------------------------------------------------------------------------------------- identity.js:27:7

Cannot cast object literal to `Foo` because property `b` is missing in object type [1] but exists in object type [2].
[prop-missing]

   identity.js:27:7
   27| (({}: {}): Foo); // Error: `a` and `b` are not defined.
             ^^ [1]

References:
   identity.js:27:12
   27| (({}: {}): Foo); // Error: `a` and `b` are not defined.
                  ^^^ [2]


Error ------------------------------------------------------------------------------------------------- identity.js:29:8

Cannot cast `any` to `Foo` because property `a` is missing in object type [1] but exists in object type [2].
[prop-missing]

   identity.js:29:8
   29| ((any: {}): Foo); // Error: `a` and `b` are not defined.
              ^^ [1]

References:
   identity.js:29:13
   29| ((any: {}): Foo); // Error: `a` and `b` are not defined.
                   ^^^ [2]


Error ------------------------------------------------------------------------------------------------- identity.js:29:8

Cannot cast `any` to `Foo` because property `b` is missing in object type [1] but exists in object type [2].
[prop-missing]

   identity.js:29:8
   29| ((any: {}): Foo); // Error: `a` and `b` are not defined.
              ^^ [1]

References:
   identity.js:29:13
   29| ((any: {}): Foo); // Error: `a` and `b` are not defined.
                   ^^^ [2]


Error ------------------------------------------------------------------------------------------------- identity.js:36:2

Cannot cast `foo` to object type because number [1] is incompatible with string [2] in property `a`. [incompatible-cast]

   identity.js:36:2
   36| (foo: {
        ^^^

References:
   identity.js:5:8
    5|     a: number,
              ^^^^^^ [1]
   identity.js:37:6
   37|   a: string, // Error: number ~> string
            ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- identity.js:36:2

Cannot cast `foo` to object type because number [1] is incompatible with string [2] in property `b`. [incompatible-cast]

   identity.js:36:2
   36| (foo: {
        ^^^

References:
   identity.js:6:8
    6|     b: number,
              ^^^^^^ [1]
   identity.js:38:6
   38|   b: string, // Error: number ~> string
            ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- identity.js:41:2

Cannot cast `foo.a` to empty because number [1] is incompatible with empty [2]. [incompatible-cast]

   identity.js:41:2
   41| (foo.a: empty); // Error: number ~> empty
        ^^^^^

References:
   identity.js:5:8
    5|     a: number,
              ^^^^^^ [1]
   identity.js:41:9
   41| (foo.a: empty); // Error: number ~> empty
               ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- identity.js:60:8

Cannot cast object literal to `$ObjMap` because in property `foo`: [incompatible-cast]
 - Either boolean [1] is incompatible with number [2].
 - Or boolean [1] is incompatible with string [3].

   identity.js:60:8
   60|   foo: true, // Error: boolean ~> number | string
              ^^^^ [1]

References:
   identity.js:63:10
   63|     foo: number | string,
                ^^^^^^ [2]
   identity.js:63:19
   63|     foo: number | string,
                         ^^^^^^ [3]


Error ------------------------------------------------------------------------------------------------- identity.js:68:2

Cannot cast object literal to `$ObjMap` because: [incompatible-cast]
 - Either boolean [1] is incompatible with number [2] in property `foo`.
 - Or boolean [1] is incompatible with string [3] in property `foo`.

   identity.js:68:2
        v
   68| ({
   69|   foo: true, // Error: boolean ~> number | string
   70| }: $ObjMap<
       ^

References:
   identity.js:69:8
   69|   foo: true, // Error: boolean ~> number | string
              ^^^^ [1]
   identity.js:71:11
   71|   ({ foo: number } | { foo: string }),
                 ^^^^^^ [2]
   identity.js:71:29
   71|   ({ foo: number } | { foo: string }),
                                   ^^^^^^ [3]


Error ------------------------------------------------------------------------------------------------ issue-2674.js:5:2

Cannot cast `a.FOO` to string literal `BAR` because string literal `FOO` [1] is incompatible with string literal
`BAR` [2]. [incompatible-cast]

   issue-2674.js:5:2
   5| (a.FOO: 'BAR'); // error
       ^^^^^

References:
   issue-2674.js:1:10
   1| type A = $ObjMapi<{ FOO: null }, <K>(k: K) => K>;
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   issue-2674.js:5:9
   5| (a.FOO: 'BAR'); // error
              ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ issue-2674.js:6:9

Cannot assign `'BAR'` to `a.FOO` because string [1] is incompatible with string literal `FOO` [2]. [incompatible-type]

   issue-2674.js:6:9
   6| a.FOO = 'BAR'; // error
              ^^^^^ [1]

References:
   issue-2674.js:1:10
   1| type A = $ObjMapi<{ FOO: null }, <K>(k: K) => K>;
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- issue-2674.js:12:2

Cannot cast `b.FOO` to string literal `BAR` because string literal `FOO` [1] is incompatible with string literal
`BAR` [2]. [incompatible-cast]

   issue-2674.js:12:2
   12| (b.FOO : 'BAR'); // error
        ^^^^^

References:
   issue-2674.js:8:46
    8| type B = $ObjMap<{ FOO: null }, <K>(k: K) => 'FOO'>;
                                                    ^^^^^ [1]
   issue-2674.js:12:10
   12| (b.FOO : 'BAR'); // error
                ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- issue-2674.js:13:9

Cannot assign `'BAR'` to `b.FOO` because string [1] is incompatible with string literal `FOO` [2]. [incompatible-type]

   issue-2674.js:13:9
   13| b.FOO = 'BAR'; // error
               ^^^^^ [1]

References:
   issue-2674.js:8:46
    8| type B = $ObjMap<{ FOO: null }, <K>(k: K) => 'FOO'>;
                                                    ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- issue-2674.js:19:2

Cannot cast `c[0]` to string literal `BAR` because string literal `FOO` [1] is incompatible with string literal
`BAR` [2]. [incompatible-cast]

   issue-2674.js:19:2
   19| (c[0]: 'BAR'); // error
        ^^^^

References:
   issue-2674.js:15:49
   15| type C = $TupleMap<[mixed, mixed], <K>(k: K) => 'FOO'>;
                                                       ^^^^^ [1]
   issue-2674.js:19:8
   19| (c[0]: 'BAR'); // error
              ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- issue-2674.js:20:8

Cannot assign `'BAR'` to `c[0]` because string [1] is incompatible with string literal `FOO` [2]. [incompatible-type]

   issue-2674.js:20:8
   20| c[0] = 'BAR'; // error
              ^^^^^ [1]

References:
   issue-2674.js:15:49
   15| type C = $TupleMap<[mixed, mixed], <K>(k: K) => 'FOO'>;
                                                       ^^^^^ [2]


Error ------------------------------------------------------------------------------- lti_implicit_instantiation.js:9:12

Cannot cast `map(...)` to object type because string [1] is incompatible with number [2] in property `bar`.
[incompatible-cast]

   lti_implicit_instantiation.js:9:12
   9| const o1 = map(foo) as {+bar: number}; // error
                 ^^^^^^^^

References:
   lti_implicit_instantiation.js:8:49
   8| const foo = Object.freeze({bar: {log: (f: () => string) => {}}})
                                                      ^^^^^^ [1]
   lti_implicit_instantiation.js:9:31
   9| const o1 = map(foo) as {+bar: number}; // error
                                    ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- objmap.js:10:2

Cannot cast `o.FOO` to string literal `BAR` because string literal `FOO` [1] is incompatible with string literal
`BAR` [2]. [incompatible-cast]

   objmap.js:10:2
   10| (o.FOO : 'BAR'); // error, 'FOO' incompatible with 'BAR'
        ^^^^^

References:
   objmap.js:2:38
    2| declare function keyMirror<O>(o: O): $ObjMapi<O, <K>(k:K) => K>;
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   objmap.js:10:10
   10| (o.FOO : 'BAR'); // error, 'FOO' incompatible with 'BAR'
                ^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- objmap.js:16:4

Cannot cast `o.foo` to string because number [1] is incompatible with string [2]. [incompatible-cast]

   objmap.js:16:4
   16|   (o.foo: string); // error, number ~> string
          ^^^^^

References:
   objmap.js:13:24
   13|   foo: Promise.resolve(0),
                              ^ [1]
   objmap.js:16:11
   16|   (o.foo: string); // error, number ~> string
                 ^^^^^^ [2]



Found 22 errors
