Error ------------------------------------------------------------------------------------------------- exported.js:1:17

The equivalent of TypeScript's `ReadonlyArray` type in Flow is `$ReadOnlyArray`. [ts-syntax]

   1| export const a: ReadonlyArray<number> = [3]; // error: ts-syntax
                      ^^^^^^^^^^^^^^^^^^^^^


Error ------------------------------------------------------------------------------------------------- exported.js:2:17

The equivalent of TypeScript's `ReadonlySet` type in Flow is `$ReadOnlySet`. [ts-syntax]

   2| export const b: ReadonlySet<number> = new Set([3]); // error: ts-syntax
                      ^^^^^^^^^^^^^^^^^^^


Error ------------------------------------------------------------------------------------------------- exported.js:3:17

The equivalent of TypeScript's `ReadonlyMap` type in Flow is `$ReadOnlyMap`. [ts-syntax]

   3| export const c: ReadonlyMap<number, string> = new Map([[3, '']]); // error: ts-syntax
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^


Error ------------------------------------------------------------------------------------------------- exported.js:4:17

The equivalent of TypeScript's `NonNullable` type in Flow is `$NonMaybeType`. [ts-syntax]

   4| export const d: NonNullable<string | null> = ''; // error: ts-syntax
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^


Error ------------------------------------------------------------------------------------------------- exported.js:5:17

The equivalent of TypeScript's `Readonly` type in Flow is `$ReadOnly`. [ts-syntax]

   5| export const e: Readonly<{foo: string}> = {foo: ''}; // error: ts-syntax
                      ^^^^^^^^^^^^^^^^^^^^^^^


Error ----------------------------------------------------------------------------------------------------- test.js:2:12

The equivalent of TypeScript's `ReadonlyArray` type in Flow is `$ReadOnlyArray`. [ts-syntax]

   2|   const a: ReadonlyArray<number> = [3]; // error: ts-syntax
                 ^^^^^^^^^^^^^^^^^^^^^


Error ----------------------------------------------------------------------------------------------------- test.js:4:12

The equivalent of TypeScript's `ReadonlySet` type in Flow is `$ReadOnlySet`. [ts-syntax]

   4|   const b: ReadonlySet<number> = new Set([3]); // error: ts-syntax
                 ^^^^^^^^^^^^^^^^^^^


Error ----------------------------------------------------------------------------------------------------- test.js:6:12

The equivalent of TypeScript's `ReadonlyMap` type in Flow is `$ReadOnlyMap`. [ts-syntax]

   6|   const c: ReadonlyMap<number, string> = new Map([[3, '']]); // error: ts-syntax
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^


Error ----------------------------------------------------------------------------------------------------- test.js:8:10

The equivalent of TypeScript's `NonNullable` type in Flow is `$NonMaybeType`. [ts-syntax]

   8|   let d: NonNullable<string | null> = ''; // error: ts-syntax
               ^^^^^^^^^^^^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------------------- test.js:10:12

The equivalent of TypeScript's `Readonly` type in Flow is `$ReadOnly`. [ts-syntax]

   10|   const e: Readonly<{foo: string}> = {foo: ''}; // error: ts-syntax
                  ^^^^^^^^^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------------------- test.js:16:32

Cannot call `exported_with_ts_typenames.a.push` because property `push` is missing in `$ReadOnlyArray` [1].
[prop-missing]

   test.js:16:32
   16|   exported_with_ts_typenames.a.push(4); // error: readonly
                                      ^^^^

References:
   exported.js:1:17
    1| export const a: ReadonlyArray<number> = [3]; // error: ts-syntax
                       ^^^^^^^^^^^^^^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------------- test.js:17:32

Cannot call `exported_with_ts_typenames.b.add` because property `add` is missing in `$ReadOnlySet` [1]. [prop-missing]

   test.js:17:32
   17|   exported_with_ts_typenames.b.add(3); // error: readonly
                                      ^^^

References:
   exported.js:2:17
    2| export const b: ReadonlySet<number> = new Set([3]); // error: ts-syntax
                       ^^^^^^^^^^^^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------------- test.js:18:32

Cannot call `exported_with_ts_typenames.c.add` because property `add` is missing in `$ReadOnlyMap` [1]. [prop-missing]

   test.js:18:32
   18|   exported_with_ts_typenames.c.add(3, ''); // error: readonly
                                      ^^^

References:
   exported.js:3:17
    3| export const c: ReadonlyMap<number, string> = new Map([[3, '']]); // error: ts-syntax
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------------- test.js:19:30

Cannot assign `null` to `exported_with_ts_typenames.d` because property `d` is not writable. [cannot-write]

   19|   exported_with_ts_typenames.d = null; // error: nonnull
                                    ^


Error ---------------------------------------------------------------------------------------------------- test.js:20:32

Cannot assign empty string to `exported_with_ts_typenames.e.foo` because property `foo` is not writable. [cannot-write]

   20|   exported_with_ts_typenames.e.foo = ''; // error: readonly
                                      ^^^



Found 15 errors
