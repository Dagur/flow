Error ----------------------------------------------------------------------------------------------------- maybe.js:9:2

Cannot cast `'foo'` to `typeof x` because string [1] is incompatible with number [2]. [incompatible-cast]

   maybe.js:9:2
   9| ('foo': typeof x); // error: string ~> number
       ^^^^^ [1]

References:
   maybe.js:8:11
   8| var x = f(42);
                ^^ [2]


Error -------------------------------------------------------------------------------------------------- optional.js:9:2

Cannot cast `null` to `typeof x` because null [1] is incompatible with number [2]. [incompatible-cast]

   optional.js:9:2
   9| (null: typeof x); // error: null ~> $Optional<number> (i.e., void|number)
       ^^^^ [1]

References:
   optional.js:8:11
   8| var x = f(42).p;
                ^^ [2]


Error -------------------------------------------------------------------------------------------------- typeof.js:45:19

Cannot assign `MyClass1` to `b` because class `MyClass1` [1] is incompatible with `MyClass1` [2]. [incompatible-type]

   typeof.js:45:19
   45| var b: MyClass1 = MyClass1;
                         ^^^^^^^^

References:
   typeof.js:11:7
   11| class MyClass1 {
             ^^^^^^^^ [1]
   typeof.js:45:8
   45| var b: MyClass1 = MyClass1;
              ^^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- typeof.js:57:26

Cannot assign `new MyClass2()` to `c` because `MyClass2` [1] is incompatible with class `MyClass2` [2].
[incompatible-type]

   typeof.js:57:26
   57| var c: typeof MyClass2 = new MyClass2();
                                ^^^^^^^^^^^^^^ [1]

References:
   typeof.js:57:8
   57| var c: typeof MyClass2 = new MyClass2();
              ^^^^^^^^^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- typeof.js:65:26

Cannot assign `'asdf'` to `e` because string [1] is incompatible with number [2]. [incompatible-type]

   typeof.js:65:26
   65| var e: typeof numValue = 'asdf'; // Error: string ~> number
                                ^^^^^^ [1]

References:
   typeof.js:65:8
   65| var e: typeof numValue = 'asdf'; // Error: string ~> number
              ^^^^^^^^^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- typeof.js:77:15

Cannot use type `numberAlias` [1] as a value. Types are erased and don't exist at runtime. [type-as-value]

   typeof.js:77:15
   77| var f: typeof numberAlias = 42; // Error: 'typeof <<type-alias>>' makes no sense...
                     ^^^^^^^^^^^

References:
   typeof.js:71:6
   71| type numberAlias = number;
            ^^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------------- typeof.js:86:17

Cannot use `Map` as a type. A name can be used as a type only if it refers to a type, interface, class, or enum
definition. To get the type of a non-class value, use `typeof`. [value-as-type]

   86| var keys: $Keys<Map> = 'A'; // Error: ineligible value used in type anno
                       ^^^


Error --------------------------------------------------------------------------------------------------- typeof.js:95:1

Cannot cast `g` to string because number [1] is incompatible with string [2]. [incompatible-cast]

   typeof.js:95:1
   95| g as string; // error
       ^

References:
   typeof.js:92:16
   92| declare var g: typeof h;
                      ^^^^^^^^ [1]
   typeof.js:95:6
   95| g as string; // error
            ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- typeof.js:101:1

Cannot cast `i.p` to string because number [1] is incompatible with string [2]. [incompatible-cast]

   typeof.js:101:1
   101| i.p as string; // error
        ^^^

References:
   typeof.js:99:15
    99| const j = {p: 1};
                      ^ [1]
   typeof.js:101:8
   101| i.p as string; // error
               ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- union.js:9:2

Cannot cast `null` to `typeof x` because: [incompatible-cast]
 - Either null [1] is incompatible with number [2].
 - Or null [1] is incompatible with string [3].

   union.js:9:2
   9| (null: typeof x); // error: null ~> number|string
       ^^^^ [1]

References:
   union.js:8:13
   8| const x = f(42, 'foo');
                  ^^ [2]
   union.js:8:17
   8| const x = f(42, 'foo');
                      ^^^^^ [3]


Error ----------------------------------------------------------------------------------------------- with-targs.js:2:35

`typeof` annotation with type arguments is not supported yet. The type arguments will be ignored. [unsupported-syntax]

   2| declare const FooClass: typeof Foo<string>;
                                        ^^^^^^^^


Error ----------------------------------------------------------------------------------------------- with-targs.js:5:31

`typeof` annotation with type arguments is not supported yet. The type arguments will be ignored. [unsupported-syntax]

   5| declare const barF: typeof bar<string>;
                                    ^^^^^^^^



Found 12 errors
