Error ------------------------------------------------------------------------------------------------------ es6.js:32:1

Cannot cast `abc` to string literal `def` because string [1] is incompatible with string literal `def` [2].
[incompatible-cast]

   es6.js:32:1
   32| abc as "def" // error "abc" ~> "def"
       ^^^

References:
   es6.js:3:20
    3| export const abc = "abc";
                          ^^^^^ [1]
   es6.js:32:8
   32| abc as "def" // error "abc" ~> "def"
              ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------------ es6.js:37:1

Cannot cast `one` to number literal `2` because number [1] is incompatible with number literal `2` [2].
[incompatible-cast]

   es6.js:37:1
   37| one as 2 // error 1 ~> 2
       ^^^

References:
   es6.js:4:20
    4| export const one = 1;
                          ^ [1]
   es6.js:37:8
   37| one as 2 // error 1 ~> 2
              ^ [2]


Error ------------------------------------------------------------------------------------------------------ es6.js:42:1

Cannot cast `tru` to boolean literal `false` because boolean [1] is incompatible with boolean literal `false` [2].
[incompatible-cast]

   es6.js:42:1
   42| tru as false // error true ~> false
       ^^^

References:
   es6.js:5:20
    5| export const tru = true;
                          ^^^^ [1]
   es6.js:42:8
   42| tru as false // error true ~> false
              ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------------ es6.js:47:1

Cannot cast `bigOne` to bigint literal `2n` because bigint [1] is incompatible with bigint literal `2n` [2].
[incompatible-cast]

   es6.js:47:1
   47| bigOne as 2n // error 1n ~> 2n
       ^^^^^^

References:
   es6.js:6:23
    6| export const bigOne = 1n;
                             ^^ [1]
   es6.js:47:11
   47| bigOne as 2n // error 1n ~> 2n
                 ^^ [2]


Error ------------------------------------------------------------------------------------------------------ es6.js:52:1

Cannot cast `abcRef` to string literal `def` because string [1] is incompatible with string literal `def` [2].
[incompatible-cast]

   es6.js:52:1
   52| abcRef as "def" // error "abc" ~> "def"
       ^^^^^^

References:
   es6.js:3:20
    3| export const abc = "abc";
                          ^^^^^ [1]
   es6.js:52:11
   52| abcRef as "def" // error "abc" ~> "def"
                 ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------------ es6.js:57:1

Cannot cast `oneRef` to number literal `2` because number [1] is incompatible with number literal `2` [2].
[incompatible-cast]

   es6.js:57:1
   57| oneRef as 2 // error 1 ~> 2
       ^^^^^^

References:
   es6.js:4:20
    4| export const one = 1;
                          ^ [1]
   es6.js:57:11
   57| oneRef as 2 // error 1 ~> 2
                 ^ [2]


Error ------------------------------------------------------------------------------------------------------ es6.js:62:1

Cannot cast `truRef` to boolean literal `false` because boolean [1] is incompatible with boolean literal `false` [2].
[incompatible-cast]

   es6.js:62:1
   62| truRef as false // error true ~> false
       ^^^^^^

References:
   es6.js:5:20
    5| export const tru = true;
                          ^^^^ [1]
   es6.js:62:11
   62| truRef as false // error true ~> false
                 ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------------ es6.js:67:1

Cannot cast `bigOneRef` to bigint literal `2n` because bigint [1] is incompatible with bigint literal `2n` [2].
[incompatible-cast]

   es6.js:67:1
   67| bigOneRef as 2n // error 1n ~> 2n
       ^^^^^^^^^

References:
   es6.js:6:23
    6| export const bigOne = 1n;
                             ^^ [1]
   es6.js:67:14
   67| bigOneRef as 2n // error 1n ~> 2n
                    ^^ [2]


Error ------------------------------------------------------------------------------------------------------ es6.js:88:1

Cannot cast `asConst.abc` to string literal `def` because string [1] is incompatible with string literal `def` [2].
[incompatible-cast]

   es6.js:88:1
   88| asConst.abc as "def"; // error "abc" ~> "def"
       ^^^^^^^^^^^

References:
   es6.js:3:20
    3| export const abc = "abc";
                          ^^^^^ [1]
   es6.js:88:16
   88| asConst.abc as "def"; // error "abc" ~> "def"
                      ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------------ es6.js:89:1

Cannot cast `asConst.abcRef` to string literal `def` because string [1] is incompatible with string literal `def` [2].
[incompatible-cast]

   es6.js:89:1
   89| asConst.abcRef as "def"; // error "abc" ~> "def"
       ^^^^^^^^^^^^^^

References:
   es6.js:3:20
    3| export const abc = "abc";
                          ^^^^^ [1]
   es6.js:89:19
   89| asConst.abcRef as "def"; // error "abc" ~> "def"
                         ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:34:1

Cannot cast `abc` to string literal `def` because string literal `abc` [1] is incompatible with string literal
`def` [2]. [incompatible-cast]

   main.js:34:1
   34| abc as "def" // error "abc" ~> "def"
       ^^^

References:
   es6.js:3:20
    3| export const abc = "abc";
                          ^^^^^ [1]
   main.js:34:8
   34| abc as "def" // error "abc" ~> "def"
              ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:36:6

Cannot cast `_` to `typeof abc` because string literal `def` [1] is incompatible with string literal `abc` [2].
[incompatible-cast]

   main.js:36:6
   36| _ as "def" as typeof abc; // error "def" ~> "abc"
            ^^^^^ [1]

References:
   main.js:36:15
   36| _ as "def" as typeof abc; // error "def" ~> "abc"
                     ^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:39:1

Cannot cast `one` to number literal `2` because number literal `1` [1] is incompatible with number literal `2` [2].
[incompatible-cast]

   main.js:39:1
   39| one as 2 // error 1 ~> 2
       ^^^

References:
   es6.js:4:20
    4| export const one = 1;
                          ^ [1]
   main.js:39:8
   39| one as 2 // error 1 ~> 2
              ^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:41:6

Cannot cast `_` to `typeof one` because number literal `2` [1] is incompatible with number literal `1` [2].
[incompatible-cast]

   main.js:41:6
   41| _ as 2 as typeof one; // error 2 ~> 1
            ^ [1]

References:
   main.js:41:11
   41| _ as 2 as typeof one; // error 2 ~> 1
                 ^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:44:1

Cannot cast `tru` to boolean literal `false` because boolean literal `true` [1] is incompatible with boolean literal
`false` [2]. [incompatible-cast]

   main.js:44:1
   44| tru as false // error true ~> false
       ^^^

References:
   es6.js:5:20
    5| export const tru = true;
                          ^^^^ [1]
   main.js:44:8
   44| tru as false // error true ~> false
              ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:46:6

Cannot cast `_` to `typeof tru` because boolean literal `false` [1] is incompatible with boolean literal `true` [2].
[incompatible-cast]

   main.js:46:6
   46| _ as false as typeof tru; // error false ~> true
            ^^^^^ [1]

References:
   main.js:46:15
   46| _ as false as typeof tru; // error false ~> true
                     ^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:49:1

Cannot cast `bigOne` to bigint literal `2n` because bigint literal `1n` [1] is incompatible with bigint literal
`2n` [2]. [incompatible-cast]

   main.js:49:1
   49| bigOne as 2n // error 1n ~> 2n
       ^^^^^^

References:
   es6.js:6:23
    6| export const bigOne = 1n;
                             ^^ [1]
   main.js:49:11
   49| bigOne as 2n // error 1n ~> 2n
                 ^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:51:6

Cannot cast `_` to `typeof bigOne` because bigint literal `2n` [1] is incompatible with bigint literal `1n` [2].
[incompatible-cast]

   main.js:51:6
   51| _ as 2n as typeof bigOne; // error 2n ~> 1n
            ^^ [1]

References:
   main.js:51:12
   51| _ as 2n as typeof bigOne; // error 2n ~> 1n
                  ^^^^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:54:1

Cannot cast `abcRef` to string literal `def` because string literal `abc` [1] is incompatible with string literal
`def` [2]. [incompatible-cast]

   main.js:54:1
   54| abcRef as "def" // error "abc" ~> "def"
       ^^^^^^

References:
   es6.js:3:20
    3| export const abc = "abc";
                          ^^^^^ [1]
   main.js:54:11
   54| abcRef as "def" // error "abc" ~> "def"
                 ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:56:6

Cannot cast `_` to `typeof abcRef` because string literal `def` [1] is incompatible with string literal `abc` [2].
[incompatible-cast]

   main.js:56:6
   56| _ as "def" as typeof abcRef; // error "def" ~> "abc"
            ^^^^^ [1]

References:
   main.js:56:15
   56| _ as "def" as typeof abcRef; // error "def" ~> "abc"
                     ^^^^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:59:1

Cannot cast `oneRef` to number literal `2` because number literal `1` [1] is incompatible with number literal `2` [2].
[incompatible-cast]

   main.js:59:1
   59| oneRef as 2 // error 1 ~> 2
       ^^^^^^

References:
   es6.js:4:20
    4| export const one = 1;
                          ^ [1]
   main.js:59:11
   59| oneRef as 2 // error 1 ~> 2
                 ^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:61:6

Cannot cast `_` to `typeof oneRef` because number literal `2` [1] is incompatible with number literal `1` [2].
[incompatible-cast]

   main.js:61:6
   61| _ as 2 as typeof oneRef; // error 2 ~> 1
            ^ [1]

References:
   main.js:61:11
   61| _ as 2 as typeof oneRef; // error 2 ~> 1
                 ^^^^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:64:1

Cannot cast `truRef` to boolean literal `false` because boolean literal `true` [1] is incompatible with boolean literal
`false` [2]. [incompatible-cast]

   main.js:64:1
   64| truRef as false // error true ~> false
       ^^^^^^

References:
   es6.js:5:20
    5| export const tru = true;
                          ^^^^ [1]
   main.js:64:11
   64| truRef as false // error true ~> false
                 ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:66:6

Cannot cast `_` to `typeof truRef` because boolean literal `false` [1] is incompatible with boolean literal `true` [2].
[incompatible-cast]

   main.js:66:6
   66| _ as false as typeof truRef; // error false ~> true
            ^^^^^ [1]

References:
   main.js:66:15
   66| _ as false as typeof truRef; // error false ~> true
                     ^^^^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:69:1

Cannot cast `bigOneRef` to bigint literal `2n` because bigint literal `1n` [1] is incompatible with bigint literal
`2n` [2]. [incompatible-cast]

   main.js:69:1
   69| bigOneRef as 2n // error 1n ~> 2n
       ^^^^^^^^^

References:
   es6.js:6:23
    6| export const bigOne = 1n;
                             ^^ [1]
   main.js:69:14
   69| bigOneRef as 2n // error 1n ~> 2n
                    ^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:71:6

Cannot cast `_` to `typeof bigOneRef` because bigint literal `2n` [1] is incompatible with bigint literal `1n` [2].
[incompatible-cast]

   main.js:71:6
   71| _ as 2n as typeof bigOneRef; // error 2n ~> 1n
            ^^ [1]

References:
   main.js:71:12
   71| _ as 2n as typeof bigOneRef; // error 2n ~> 1n
                  ^^^^^^^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:73:1

Cannot cast `obj.abc` to string literal `abc` because string [1] is incompatible with string literal `abc` [2].
[incompatible-cast]

   main.js:73:1
   73| obj.abc as "abc"; // error string ~> "abc"
       ^^^^^^^

References:
   es6.js:13:27
   13| export const obj = { abc: "abc", one: 1, tru: true, bigOne: 1n };
                                 ^^^^^ [1]
   main.js:73:12
   73| obj.abc as "abc"; // error string ~> "abc"
                  ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:74:1

Cannot cast `obj.one` to number literal `1` because number [1] is incompatible with number literal `1` [2].
[incompatible-cast]

   main.js:74:1
   74| obj.one as 1; // error number ~> 1
       ^^^^^^^

References:
   es6.js:13:39
   13| export const obj = { abc: "abc", one: 1, tru: true, bigOne: 1n };
                                             ^ [1]
   main.js:74:12
   74| obj.one as 1; // error number ~> 1
                  ^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:75:1

Cannot cast `obj.tru` to boolean literal `true` because boolean [1] is incompatible with boolean literal `true` [2].
[incompatible-cast]

   main.js:75:1
   75| obj.tru as true; // error boolean ~> true
       ^^^^^^^

References:
   es6.js:13:47
   13| export const obj = { abc: "abc", one: 1, tru: true, bigOne: 1n };
                                                     ^^^^ [1]
   main.js:75:12
   75| obj.tru as true; // error boolean ~> true
                  ^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:76:1

Cannot cast `obj.bigOne` to bigint literal `1n` because bigint [1] is incompatible with bigint literal `1n` [2].
[incompatible-cast]

   main.js:76:1
   76| obj.bigOne as 1n; // error bigint ~> 1n
       ^^^^^^^^^^

References:
   es6.js:13:61
   13| export const obj = { abc: "abc", one: 1, tru: true, bigOne: 1n };
                                                                   ^^ [1]
   main.js:76:15
   76| obj.bigOne as 1n; // error bigint ~> 1n
                     ^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:78:1

Cannot cast `spread.abc` to string literal `abc` because string [1] is incompatible with string literal `abc` [2].
[incompatible-cast]

   main.js:78:1
   78| spread.abc as "abc"; // error string ~> "abc"
       ^^^^^^^^^^

References:
   es6.js:13:27
   13| export const obj = { abc: "abc", one: 1, tru: true, bigOne: 1n };
                                 ^^^^^ [1]
   main.js:78:15
   78| spread.abc as "abc"; // error string ~> "abc"
                     ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:79:1

Cannot cast `spread.one` to number literal `1` because number [1] is incompatible with number literal `1` [2].
[incompatible-cast]

   main.js:79:1
   79| spread.one as 1; // error number ~> 1
       ^^^^^^^^^^

References:
   es6.js:13:39
   13| export const obj = { abc: "abc", one: 1, tru: true, bigOne: 1n };
                                             ^ [1]
   main.js:79:15
   79| spread.one as 1; // error number ~> 1
                     ^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:80:1

Cannot cast `spread.tru` to boolean literal `true` because boolean [1] is incompatible with boolean literal `true` [2].
[incompatible-cast]

   main.js:80:1
   80| spread.tru as true; // error boolean ~> true
       ^^^^^^^^^^

References:
   es6.js:13:47
   13| export const obj = { abc: "abc", one: 1, tru: true, bigOne: 1n };
                                                     ^^^^ [1]
   main.js:80:15
   80| spread.tru as true; // error boolean ~> true
                     ^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:81:1

Cannot cast `spread.bigOne` to bigint literal `1n` because bigint [1] is incompatible with bigint literal `1n` [2].
[incompatible-cast]

   main.js:81:1
   81| spread.bigOne as 1n; // error bigint ~> 1n
       ^^^^^^^^^^^^^

References:
   es6.js:13:61
   13| export const obj = { abc: "abc", one: 1, tru: true, bigOne: 1n };
                                                                   ^^ [1]
   main.js:81:18
   81| spread.bigOne as 1n; // error bigint ~> 1n
                        ^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:83:1

Cannot cast `objRefs.abc` to string literal `abc` because string [1] is incompatible with string literal `abc` [2].
[incompatible-cast]

   main.js:83:1
   83| objRefs.abc as "abc"; // error string ~> "abc"
       ^^^^^^^^^^^

References:
   es6.js:3:20
    3| export const abc = "abc";
                          ^^^^^ [1]
   main.js:83:16
   83| objRefs.abc as "abc"; // error string ~> "abc"
                      ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:84:1

Cannot cast `objRefs.abcRef` to string literal `abc` because string [1] is incompatible with string literal `abc` [2].
[incompatible-cast]

   main.js:84:1
   84| objRefs.abcRef as "abc"; // error string ~> "abc"
       ^^^^^^^^^^^^^^

References:
   es6.js:3:20
    3| export const abc = "abc";
                          ^^^^^ [1]
   main.js:84:19
   84| objRefs.abcRef as "abc"; // error string ~> "abc"
                         ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:85:1

Cannot cast `spreadObjRefs.abc` to string literal `abc` because string [1] is incompatible with string literal
`abc` [2]. [incompatible-cast]

   main.js:85:1
   85| spreadObjRefs.abc as "abc"; // error string ~> "abc"
       ^^^^^^^^^^^^^^^^^

References:
   es6.js:3:20
    3| export const abc = "abc";
                          ^^^^^ [1]
   main.js:85:22
   85| spreadObjRefs.abc as "abc"; // error string ~> "abc"
                            ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:86:1

Cannot cast `spreadObjRefs.abcRef` to string literal `abc` because string [1] is incompatible with string literal
`abc` [2]. [incompatible-cast]

   main.js:86:1
   86| spreadObjRefs.abcRef as "abc"; // error string ~> "abc"
       ^^^^^^^^^^^^^^^^^^^^

References:
   es6.js:3:20
    3| export const abc = "abc";
                          ^^^^^ [1]
   main.js:86:25
   86| spreadObjRefs.abcRef as "abc"; // error string ~> "abc"
                               ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:90:1

Cannot cast `asConst.abc` to string literal `def` because string literal `abc` [1] is incompatible with string literal
`def` [2]. [incompatible-cast]

   main.js:90:1
   90| asConst.abc as "def"; // error  "abc" ~> "def"
       ^^^^^^^^^^^

References:
   es6.js:3:20
    3| export const abc = "abc";
                          ^^^^^ [1]
   main.js:90:16
   90| asConst.abc as "def"; // error  "abc" ~> "def"
                      ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:91:1

Cannot cast `asConst.abcRef` to string literal `def` because string literal `abc` [1] is incompatible with string
literal `def` [2]. [incompatible-cast]

   main.js:91:1
   91| asConst.abcRef as "def"; // error "abc" ~> "def"
       ^^^^^^^^^^^^^^

References:
   es6.js:3:20
    3| export const abc = "abc";
                          ^^^^^ [1]
   main.js:91:19
   91| asConst.abcRef as "def"; // error "abc" ~> "def"
                         ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:92:6

Cannot cast `_` to `typeof asConst.abc` because string literal `def` [1] is incompatible with string literal `abc` [2].
[incompatible-cast]

   main.js:92:6
   92| _ as "def" as typeof asConst.abc; // error "def" ~> "abc"
            ^^^^^ [1]

References:
   main.js:92:15
   92| _ as "def" as typeof asConst.abc; // error "def" ~> "abc"
                     ^^^^^^^^^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:93:6

Cannot cast `_` to `typeof asConst.abcRef` because string literal `def` [1] is incompatible with string literal
`abc` [2]. [incompatible-cast]

   main.js:93:6
   93| _ as "def" as typeof asConst.abcRef; // error "def" ~> "abc"
            ^^^^^ [1]

References:
   main.js:93:15
   93| _ as "def" as typeof asConst.abcRef; // error "def" ~> "abc"
                     ^^^^^^^^^^^^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:94:6

Cannot cast `_` to `typeof asConst.abc` because string [1] is incompatible with string literal `abc` [2].
[incompatible-cast]

   main.js:94:6
   94| _ as string as typeof asConst.abc; // error string ~> "abc"
            ^^^^^^ [1]

References:
   main.js:94:16
   94| _ as string as typeof asConst.abc; // error string ~> "abc"
                      ^^^^^^^^^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- main.js:95:6

Cannot cast `_` to `typeof asConst.abcRef` because string [1] is incompatible with string literal `abc` [2].
[incompatible-cast]

   main.js:95:6
   95| _ as string as typeof asConst.abcRef; // error string ~> "abc"
            ^^^^^^ [1]

References:
   main.js:95:16
   95| _ as string as typeof asConst.abcRef; // error string ~> "abc"
                      ^^^^^^^^^^^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- main.js:103:3

Cannot cast `x.abc` to string literal `abc` because string [1] is incompatible with string literal `abc` [2].
[incompatible-cast]

   main.js:103:3
   103|   x.abc as "abc"; // error string ~> "abc"
          ^^^^^

References:
   es6.js:3:20
     3| export const abc = "abc";
                           ^^^^^ [1]
   main.js:103:12
   103|   x.abc as "abc"; // error string ~> "abc"
                   ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- main.js:104:3

Cannot cast `x.abcRef` to string literal `abc` because string [1] is incompatible with string literal `abc` [2].
[incompatible-cast]

   main.js:104:3
   104|   x.abcRef as "abc"; // error string ~> "abc"
          ^^^^^^^^

References:
   es6.js:3:20
     3| export const abc = "abc";
                           ^^^^^ [1]
   main.js:104:15
   104|   x.abcRef as "abc"; // error string ~> "abc"
                      ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- main.js:108:3

Cannot cast `x.abc` to string literal `abc` because string [1] is incompatible with string literal `abc` [2].
[incompatible-cast]

   main.js:108:3
   108|   x.abc as "abc"; // error string ~> "abc"
          ^^^^^

References:
   es6.js:3:20
     3| export const abc = "abc";
                           ^^^^^ [1]
   main.js:108:12
   108|   x.abc as "abc"; // error string ~> "abc"
                   ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- main.js:109:3

Cannot cast `x.abcRef` to string literal `abc` because string [1] is incompatible with string literal `abc` [2].
[incompatible-cast]

   main.js:109:3
   109|   x.abcRef as "abc"; // error string ~> "abc"
          ^^^^^^^^

References:
   es6.js:3:20
     3| export const abc = "abc";
                           ^^^^^ [1]
   main.js:109:15
   109|   x.abcRef as "abc"; // error string ~> "abc"
                      ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- main.js:117:3

Cannot cast `x` to string literal `abc` because string [1] is incompatible with string literal `abc` [2].
[incompatible-cast]

   main.js:117:3
   117|   x as "abc"; // error string ~> "abc"
          ^

References:
   main.js:116:26
   116| function test_default(x: typeof default_) {
                                 ^^^^^^^^^^^^^^^ [1]
   main.js:117:8
   117|   x as "abc"; // error string ~> "abc"
               ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- main.js:122:3

Cannot cast `cjs1` to string literal `abc` because string [1] is incompatible with string literal `abc` [2].
[incompatible-cast]

   main.js:122:3
   122|   cjs1 as "abc"; // error string ~> "abc"
          ^^^^

References:
   cjs-1.js:3:18
     3| module.exports = "abc";
                         ^^^^^ [1]
   main.js:122:11
   122|   cjs1 as "abc"; // error string ~> "abc"
                  ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- main.js:126:3

Cannot cast `cjs2.foo` to string literal `abc` because string [1] is incompatible with string literal `abc` [2].
[incompatible-cast]

   main.js:126:3
   126|   cjs2.foo as "abc"; // error string ~> "abc"
          ^^^^^^^^

References:
   cjs-2.js:4:10
     4|     foo: "abc",
                 ^^^^^ [1]
   main.js:126:15
   126|   cjs2.foo as "abc"; // error string ~> "abc"
                      ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- main.js:127:3

Cannot cast `cjs2.bar` to number literal `1` because number [1] is incompatible with number literal `1` [2].
[incompatible-cast]

   main.js:127:3
   127|   cjs2.bar as 1; // error number ~> 1
          ^^^^^^^^

References:
   cjs-2.js:5:10
     5|     bar: 1,
                 ^ [1]
   main.js:127:15
   127|   cjs2.bar as 1; // error number ~> 1
                      ^ [2]


Error ---------------------------------------------------------------------------------------------------- main.js:128:3

Cannot cast `cjs2.baz` to boolean literal `true` because boolean [1] is incompatible with boolean literal `true` [2].
[incompatible-cast]

   main.js:128:3
   128|   cjs2.baz as true; // error boolean ~> true
          ^^^^^^^^

References:
   cjs-2.js:6:10
     6|     baz: true,
                 ^^^^ [1]
   main.js:128:15
   128|   cjs2.baz as true; // error boolean ~> true
                      ^^^^ [2]



Found 53 errors
