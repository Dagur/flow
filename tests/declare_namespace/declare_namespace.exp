Error ---------------------------------------------------------------------------------------------- binding_test.js:2:6

Cannot declare `conflict_with_type_decl_1` [1] because the name is already bound. [name-already-bound]

   binding_test.js:2:6
   2| type conflict_with_type_decl_1 = 1; // error
           ^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   binding_test.js:1:19
   1| declare namespace conflict_with_type_decl_1 {}
                        ^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error --------------------------------------------------------------------------------------------- binding_test.js:4:19

Cannot declare `conflict_with_type_decl_2` [1] because the name is already bound. [name-already-bound]

   binding_test.js:4:19
   4| declare namespace conflict_with_type_decl_2 {} // error
                        ^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   binding_test.js:3:6
   3| type conflict_with_type_decl_2 = 1;
           ^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error --------------------------------------------------------------------------------------------- binding_test.js:7:19

Cannot declare `const_like` [1] because the name is already bound. [name-already-bound]

   binding_test.js:7:19
   7| declare namespace const_like {} // error
                        ^^^^^^^^^^

References:
   binding_test.js:6:19
   6| declare namespace const_like {}
                        ^^^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------- binding_test.js:8:1

Cannot reassign constant `const_like` [1]. [reassign-const]

   binding_test.js:8:1
   8| const_like = 1; // error
      ^^^^^^^^^^

References:
   binding_test.js:6:19
   6| declare namespace const_like {}
                        ^^^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------- binding_test.js:9:7

Cannot declare `const_like` [1] because the name is already bound. [name-already-bound]

   binding_test.js:9:7
   9| const const_like = 1; // error
            ^^^^^^^^^^

References:
   binding_test.js:6:19
   6| declare namespace const_like {}
                        ^^^^^^^^^^ [1]


Error -------------------------------------------------------------------------------------------------- exported.js:9:3

Cannot use `if` statements with in `declare namespace`. The statement will be ignored. [unsupported-syntax]

   9|   if (true) {} // unsupported
        ^^^^^^^^^^^^


Error ------------------------------------------------------------------------------------------------- exported.js:10:3

Cannot use `declare module.exports` statements with in `declare namespace`. The statement will be ignored.
[unsupported-syntax]

   10|   declare module.exports: {foo: string}; // unsupported
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


Error ------------------------------------------------------------------------------------------------- exported.js:10:3

Unable to determine module type (CommonJS vs ES) if both an export statement and `module.exports` are used in the same
module! [module-type-conflict]

   10|   declare module.exports: {foo: string}; // unsupported
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


Error ------------------------------------------------------------------------------------------------- exported.js:11:3

Cannot use `import declaration` statements with in `declare namespace`. The statement will be ignored.
[unsupported-syntax]

   11|   import React from 'react'; // unsupported
         ^^^^^^^^^^^^^^^^^^^^^^^^^^


Error ------------------------------------------------------------------------------------------------ exported.js:11:21

Cannot resolve module `react`. [cannot-resolve-module]

   11|   import React from 'react'; // unsupported
                           ^^^^^^^


Error ------------------------------------------------------------------------------------------------- exported.js:16:1

Cannot cast `exported_ns.bar1` to empty because number [1] is incompatible with empty [2]. [incompatible-cast]

   exported.js:16:1
   16| exported_ns.bar1 as empty; // error: number ~> empty
       ^^^^^^^^^^^^^^^^

References:
   exported.js:2:30
    2|   declare export const bar1: number;
                                    ^^^^^^ [1]
   exported.js:16:21
   16| exported_ns.bar1 as empty; // error: number ~> empty
                           ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- exported.js:17:1

Cannot cast `exported_ns.bar2` to empty because boolean [1] is incompatible with empty [2]. [incompatible-cast]

   exported.js:17:1
   17| exported_ns.bar2 as empty; // error: boolean ~> empty
       ^^^^^^^^^^^^^^^^

References:
   exported.js:3:23
    3|   declare const bar2: boolean;
                             ^^^^^^^ [1]
   exported.js:17:21
   17| exported_ns.bar2 as empty; // error: boolean ~> empty
                           ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- exported.js:18:1

Cannot cast `exported_ns.bar3` to empty because string [1] is incompatible with empty [2]. [incompatible-cast]

   exported.js:18:1
   18| exported_ns.bar3 as empty; // error: string ~> empty
       ^^^^^^^^^^^^^^^^

References:
   exported.js:4:21
    4|   declare var bar3: string;
                           ^^^^^^ [1]
   exported.js:18:21
   18| exported_ns.bar3 as empty; // error: string ~> empty
                           ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- exported.js:19:1

Cannot cast `exported_ns.f(...)` to empty because number [1] is incompatible with empty [2]. [incompatible-cast]

   exported.js:19:1
   19| exported_ns.f(3) as empty; // error: number ~> empty
       ^^^^^^^^^^^^^^^^

References:
   exported.js:6:31
    6|   declare function f(number): number;
                                     ^^^^^^ [1]
   exported.js:19:21
   19| exported_ns.f(3) as empty; // error: number ~> empty
                           ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- exported.js:20:1

Cannot cast `1` to `Baz` because number [1] is incompatible with string [2]. [incompatible-cast]

   exported.js:20:1
   20| 1 as exported_ns.Baz; // error: number ~> string
       ^ [1]

References:
   exported.js:20:6
   20| 1 as exported_ns.Baz; // error: number ~> string
            ^^^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- exported.js:21:1

Cannot cast `exported_ns.B.C` to empty because `B` [1] is incompatible with empty [2]. [incompatible-cast]

   exported.js:21:1
   21| exported_ns.B.C as empty; // error: enum ~> empty
       ^^^^^^^^^^^^^^^

References:
   exported.js:8:8
    8|   enum B { C, D }
              ^ [1]
   exported.js:21:20
   21| exported_ns.B.C as empty; // error: enum ~> empty
                          ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ exported.js:22:13

Cannot get `exported_ns.React` because property `React` is missing in namespace exported_ns [1]. [prop-missing]

   exported.js:22:13
   22| exported_ns.React; // error: prop-missing
                   ^^^^^

References:
   exported.js:1:19
    1| declare namespace exported_ns {
                         ^^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------------------- typing_test.js:7:1

Cannot cast `both_type_and_value.bar1` to empty because number [1] is incompatible with empty [2]. [incompatible-cast]

   typing_test.js:7:1
   7| both_type_and_value.bar1 as empty; // error: number ~> empty
      ^^^^^^^^^^^^^^^^^^^^^^^^

References:
   typing_test.js:2:30
   2|   declare export const bar1: number;
                                   ^^^^^^ [1]
   typing_test.js:7:29
   7| both_type_and_value.bar1 as empty; // error: number ~> empty
                                  ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- typing_test.js:8:1

Cannot cast `both_type_and_value.bar2` to empty because boolean [1] is incompatible with empty [2]. [incompatible-cast]

   typing_test.js:8:1
   8| both_type_and_value.bar2 as empty; // error: boolean ~> empty
      ^^^^^^^^^^^^^^^^^^^^^^^^

References:
   typing_test.js:3:30
   3|   declare export const bar2: boolean;
                                   ^^^^^^^ [1]
   typing_test.js:8:29
   8| both_type_and_value.bar2 as empty; // error: boolean ~> empty
                                  ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- typing_test.js:9:29

Cannot resolve name `foo`. [cannot-resolve-name]

   9| both_type_and_value.bar1 as foo.Baz; // error: number ~> string
                                  ^^^


Error ---------------------------------------------------------------------------------------------- typing_test.js:9:29

Cannot use `Baz` as a type because it is an `any`-typed value. Type `Baz` properly, so it is no longer `any`-typed, to
use it as an annotation. [value-as-type]

   9| both_type_and_value.bar1 as foo.Baz; // error: number ~> string
                                  ^^^^^^^


Error ---------------------------------------------------------------------------------------------- typing_test.js:12:3

Cannot use `declare module.exports` statements with in `declare namespace`. The statement will be ignored.
[unsupported-syntax]

   12|   declare module.exports: {foo: string}; // unsupported
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


Error --------------------------------------------------------------------------------------------- typing_test.js:15:36

Cannot get `unsupported_declare_module_exports.foo` because property `foo` is missing in namespace
unsupported_declare_module_exports [1]. [prop-missing]

   typing_test.js:15:36
   15| unsupported_declare_module_exports.foo; // prop-missing because `declare module.exports` is ignored
                                          ^^^

References:
   typing_test.js:11:19
   11| declare namespace unsupported_declare_module_exports {
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------- typing_test.js:23:3

Cannot use `if` statements with in `declare namespace`. The statement will be ignored. [unsupported-syntax]

   23|   if (true) {} // error
         ^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------------- typing_test.js:24:3

Cannot use `import declaration` statements with in `declare namespace`. The statement will be ignored.
[unsupported-syntax]

   24|   import React from 'react'; // unsupported
         ^^^^^^^^^^^^^^^^^^^^^^^^^^


Error --------------------------------------------------------------------------------------------- typing_test.js:24:21

Cannot resolve module `react`. [cannot-resolve-module]

   24|   import React from 'react'; // unsupported
                           ^^^^^^^


Error ---------------------------------------------------------------------------------------------- typing_test.js:26:1

Cannot cast `unsupported_statements.a` to empty because number [1] is incompatible with empty [2]. [incompatible-cast]

   typing_test.js:26:1
   26| unsupported_statements.a as empty; // error: number ~> empty
       ^^^^^^^^^^^^^^^^^^^^^^^^

References:
   typing_test.js:18:20
   18|   declare const a: number;
                          ^^^^^^ [1]
   typing_test.js:26:29
   26| unsupported_statements.a as empty; // error: number ~> empty
                                   ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- typing_test.js:28:1

Cannot cast `unsupported_statements.B.D` to empty because `B` [1] is incompatible with empty [2]. [incompatible-cast]

   typing_test.js:28:1
   28| unsupported_statements.B.D as empty; // error: enum ~> empty
       ^^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   typing_test.js:19:8
   19|   enum B {
              ^ [1]
   typing_test.js:28:31
   28| unsupported_statements.B.D as empty; // error: enum ~> empty
                                     ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- typing_test.js:31:1

Cannot cast `exported_ns.bar1` to empty because number [1] is incompatible with empty [2]. [incompatible-cast]

   typing_test.js:31:1
   31| exported_ns.bar1 as empty; // error: number ~> empty
       ^^^^^^^^^^^^^^^^

References:
   exported.js:2:30
    2|   declare export const bar1: number;
                                    ^^^^^^ [1]
   typing_test.js:31:21
   31| exported_ns.bar1 as empty; // error: number ~> empty
                           ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- typing_test.js:32:1

Cannot cast `exported_ns.bar2` to empty because boolean [1] is incompatible with empty [2]. [incompatible-cast]

   typing_test.js:32:1
   32| exported_ns.bar2 as empty; // error: boolean ~> empty
       ^^^^^^^^^^^^^^^^

References:
   exported.js:3:23
    3|   declare const bar2: boolean;
                             ^^^^^^^ [1]
   typing_test.js:32:21
   32| exported_ns.bar2 as empty; // error: boolean ~> empty
                           ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- typing_test.js:33:1

Cannot cast `exported_ns.bar3` to empty because string [1] is incompatible with empty [2]. [incompatible-cast]

   typing_test.js:33:1
   33| exported_ns.bar3 as empty; // error: string ~> empty
       ^^^^^^^^^^^^^^^^

References:
   exported.js:4:21
    4|   declare var bar3: string;
                           ^^^^^^ [1]
   typing_test.js:33:21
   33| exported_ns.bar3 as empty; // error: string ~> empty
                           ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- typing_test.js:34:1

Cannot cast `exported_ns.f(...)` to empty because number [1] is incompatible with empty [2]. [incompatible-cast]

   typing_test.js:34:1
   34| exported_ns.f(3) as empty; // error: number ~> empty
       ^^^^^^^^^^^^^^^^

References:
   exported.js:6:31
    6|   declare function f(number): number;
                                     ^^^^^^ [1]
   typing_test.js:34:21
   34| exported_ns.f(3) as empty; // error: number ~> empty
                           ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- typing_test.js:35:1

Cannot cast `1` to `Baz` because number [1] is incompatible with string [2]. [incompatible-cast]

   typing_test.js:35:1
   35| 1 as exported_ns.Baz; // error: number ~> string
       ^ [1]

References:
   typing_test.js:35:6
   35| 1 as exported_ns.Baz; // error: number ~> string
            ^^^^^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- typing_test.js:36:1

Cannot cast `exported_ns.B.C` to empty because `B` [1] is incompatible with empty [2]. [incompatible-cast]

   typing_test.js:36:1
   36| exported_ns.B.C as empty; // error: enum ~> empty
       ^^^^^^^^^^^^^^^

References:
   exported.js:8:8
    8|   enum B { C, D }
              ^ [1]
   typing_test.js:36:20
   36| exported_ns.B.C as empty; // error: enum ~> empty
                          ^^^^^ [2]


Error --------------------------------------------------------------------------------------------- typing_test.js:37:13

Cannot get `exported_ns.React` because property `React` is missing in namespace exported_ns [1]. [prop-missing]

   typing_test.js:37:13
   37| exported_ns.React; // error: prop-missing
                   ^^^^^

References:
   exported.js:1:19
    1| declare namespace exported_ns {
                         ^^^^^^^^^^^ [1]



Found 35 errors
