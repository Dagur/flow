Error ------------------------------------------------------------------------------------------------------ any.js:5:21

Cannot assign `dict[k]` to `val` because number [1] is incompatible with string [2]. [incompatible-type]

   any.js:5:21
   5| const val: string = dict[k] // error: number incompatible with string
                          ^^^^^^^

References:
   any.js:3:29
   3| const dict: {[key: string]: number} = {}
                                  ^^^^^^ [1]
   any.js:5:12
   5| const val: string = dict[k] // error: number incompatible with string
                 ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- compatible.js:14:10

Cannot return `x` because function type [1] cannot be unbound from the context [1] where it was defined in the `this`
parameter of property `toString`. [method-unbinding]

   compatible.js:14:10
    14|   return x;
                 ^

References:
   <BUILTINS>/core.js:247:5
   247|     toString(): string;
            ^^^^^^^^^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------------------- dictionary.js:41:9

Cannot assign `new A()` to `o.p` because `A` [1] is incompatible with `B` [2]. [incompatible-type]

   dictionary.js:41:9
   41|   o.p = new A(); // error, A ~> B
               ^^^^^^^ [1]

References:
   dictionary.js:40:46
   40| function set_prop_covariant(o: {[k: string]: B}) {
                                                    ^ [2]


Error ----------------------------------------------------------------------------------------------- dictionary.js:50:3

Cannot cast `o.p` to `C` because `B` [1] is incompatible with `C` [2]. [incompatible-cast]

   dictionary.js:50:3
   50|   o.p as C; // error, C ~> B
         ^^^

References:
   dictionary.js:47:50
   47| function get_prop_contravariant(o: {[k: string]: B}) {
                                                        ^ [1]
   dictionary.js:50:10
   50|   o.p as C; // error, C ~> B
                ^ [2]


Error ----------------------------------------------------------------------------------------------- dictionary.js:56:3

string `prop` [1] is incompatible with number [2]. [incompatible-type]

   dictionary.js:56:3
   56|   o.prop = 'err'; // error: string ~> number
         ^^^^^^ [1]

References:
   dictionary.js:55:48
   55| function add_prop_to_nonstring_key_dot(o: {[k: number]: any}) {
                                                      ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- dictionary.js:79:3

Cannot cast `o.toString()` to boolean because string [1] is incompatible with boolean [2]. [incompatible-cast]

   dictionary.js:79:3
    79|   o.toString() as boolean; // error: string ~> boolean
          ^^^^^^^^^^^^

References:
   <BUILTINS>/core.js:247:17
   247|     toString(): string;
                        ^^^^^^ [1]
   dictionary.js:79:19
    79|   o.toString() as boolean; // error: string ~> boolean
                          ^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- dictionary.js:80:10

Cannot return `o` because function type [1] cannot be unbound from the context [1] where it was defined in the `this`
parameter of property `toString`. [method-unbinding]

   dictionary.js:80:10
    80|   return o; // ok
                 ^

References:
   <BUILTINS>/core.js:247:5
   247|     toString(): string;
            ^^^^^^^^^^^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------- dictionary.js:94:36

Cannot assign `x` to `a` because `A` [1] is incompatible with `B` [2] in the indexer property of array element. This
property is invariantly typed. See
https://flow.org/en/docs/faq/#why-cant-i-pass-a-string-to-a-function-that-takes-a-string-number. [incompatible-type]

   dictionary.js:94:36
   94|   let a: Array<{[k: string]: A}> = x; // error
                                          ^

References:
   dictionary.js:94:30
   94|   let a: Array<{[k: string]: A}> = x; // error
                                    ^ [1]
   dictionary.js:93:67
   93| function unification_dict_values_invariant(x: Array<{[k: string]: B}>) {
                                                                         ^ [2]


Error ---------------------------------------------------------------------------------------------- dictionary.js:99:36

Cannot assign `x` to `c` because `B` [1] is incompatible with `C` [2] in the indexer property of array element.
[incompatible-type]

   dictionary.js:99:36
   99|   let c: Array<{[k: string]: C}> = x; // error
                                          ^

References:
   dictionary.js:93:67
   93| function unification_dict_values_invariant(x: Array<{[k: string]: B}>) {
                                                                         ^ [1]
   dictionary.js:99:30
   99|   let c: Array<{[k: string]: C}> = x; // error
                                    ^ [2]


Error ---------------------------------------------------------------------------------------------- dictionary.js:100:3

Cannot cast `x[0].p` to `C` because `B` [1] is incompatible with `C` [2]. [incompatible-cast]

   dictionary.js:100:3
   100|   x[0].p as C; // not true
          ^^^^^^

References:
   dictionary.js:93:67
    93| function unification_dict_values_invariant(x: Array<{[k: string]: B}>) {
                                                                          ^ [1]
   dictionary.js:100:13
   100|   x[0].p as C; // not true
                    ^ [2]


Error --------------------------------------------------------------------------------------------- dictionary.js:104:29

Cannot assign `x` to `a` because `A` [1] is incompatible with `B` [2] in the indexer property. This property is
invariantly typed. See https://flow.org/en/docs/faq/#why-cant-i-pass-a-string-to-a-function-that-takes-a-string-number.
[incompatible-type]

   dictionary.js:104:29
   104|   let a: {[k: string]: A} = x; // error
                                    ^

References:
   dictionary.js:104:24
   104|   let a: {[k: string]: A} = x; // error
                               ^ [1]
   dictionary.js:103:57
   103| function subtype_dict_values_invariant(x: {[k: string]: B}) {
                                                                ^ [2]


Error --------------------------------------------------------------------------------------------- dictionary.js:109:29

Cannot assign `x` to `c` because `B` [1] is incompatible with `C` [2] in the indexer property. [incompatible-type]

   dictionary.js:109:29
   109|   let c: {[k: string]: C} = x; // error
                                    ^

References:
   dictionary.js:103:57
   103| function subtype_dict_values_invariant(x: {[k: string]: B}) {
                                                                ^ [1]
   dictionary.js:109:24
   109|   let c: {[k: string]: C} = x; // error
                               ^ [2]


Error ---------------------------------------------------------------------------------------------- dictionary.js:110:3

Cannot cast `x.p` to `C` because `B` [1] is incompatible with `C` [2]. [incompatible-cast]

   dictionary.js:110:3
   110|   x.p as C; // not true
          ^^^

References:
   dictionary.js:103:57
   103| function subtype_dict_values_invariant(x: {[k: string]: B}) {
                                                                ^ [1]
   dictionary.js:110:10
   110|   x.p as C; // not true
                 ^ [2]


Error ---------------------------------------------------------------------------------------------- dictionary.js:121:8

Cannot assign object literal to `b` because `A` [1] is incompatible with `B` [2] in property `a`. [incompatible-type]

   dictionary.js:121:8
   121|     a: new A(), // error, A not <: B
               ^^^^^^^ [1]

References:
   dictionary.js:120:24
   120|   let b: {[k: string]: B} = {
                               ^ [2]


Error ---------------------------------------------------------------------------------------------- dictionary.js:127:8

Cannot assign object literal to `c` because `A` [1] is incompatible with `C` [2] in property `a`. [incompatible-type]

   dictionary.js:127:8
   127|     a: new A(), // error, A not <: C
               ^^^^^^^ [1]

References:
   dictionary.js:126:24
   126|   let c: {[k: string]: C} = {
                               ^ [2]


Error ---------------------------------------------------------------------------------------------- dictionary.js:128:8

Cannot assign object literal to `c` because `B` [1] is incompatible with `C` [2] in property `b`. [incompatible-type]

   dictionary.js:128:8
   128|     b: new B(), // error, A not <: C
               ^^^^^^^ [1]

References:
   dictionary.js:126:24
   126|   let c: {[k: string]: C} = {
                               ^ [2]


Error --------------------------------------------------------------------------------------------- dictionary.js:139:33

Cannot assign `x` to `a` because `A` [1] is incompatible with `B` [2] in the indexer property's key of array element.
[incompatible-type]

   dictionary.js:139:33
   139|   let a: Array<{[k: A]: any}> = x; // error
                                        ^

References:
   dictionary.js:139:21
   139|   let a: Array<{[k: A]: any}> = x; // error
                            ^ [1]
   dictionary.js:138:56
   138| function unification_dict_keys_invariant(x: Array<{[k: B]: any}>) {
                                                               ^ [2]


Error --------------------------------------------------------------------------------------------- dictionary.js:141:33

Cannot assign `x` to `c` because `B` [1] is incompatible with `C` [2] in the indexer property's key of array element.
[incompatible-type]

   dictionary.js:141:33
   141|   let c: Array<{[k: C]: any}> = x; // error
                                        ^

References:
   dictionary.js:138:56
   138| function unification_dict_keys_invariant(x: Array<{[k: B]: any}>) {
                                                               ^ [1]
   dictionary.js:141:21
   141|   let c: Array<{[k: C]: any}> = x; // error
                            ^ [2]


Error --------------------------------------------------------------------------------------------- dictionary.js:145:26

Cannot assign `x` to `a` because `A` [1] is incompatible with `B` [2] in the indexer property's key. [incompatible-type]

   dictionary.js:145:26
   145|   let a: {[k: A]: any} = x; // error
                                 ^

References:
   dictionary.js:145:15
   145|   let a: {[k: A]: any} = x; // error
                      ^ [1]
   dictionary.js:144:46
   144| function subtype_dict_keys_invariant(x: {[k: B]: any}) {
                                                     ^ [2]


Error --------------------------------------------------------------------------------------------- dictionary.js:147:26

Cannot assign `x` to `c` because `B` [1] is incompatible with `C` [2] in the indexer property's key. [incompatible-type]

   dictionary.js:147:26
   147|   let c: {[k: C]: any} = x; // error
                                 ^

References:
   dictionary.js:144:46
   144| function subtype_dict_keys_invariant(x: {[k: B]: any}) {
                                                     ^ [1]
   dictionary.js:147:15
   147|   let c: {[k: C]: any} = x; // error
                      ^ [2]


Error --------------------------------------------------------------------------------------------- dictionary.js:153:42

Cannot assign `x` to `a` because `A` [1] is incompatible with `B` [2] in property `p` of array element.
[incompatible-type]

   dictionary.js:153:42
   153|   let a: Array<{[k: string]: B, p: A}> = x; // error: A ~> B
                                                 ^

References:
   dictionary.js:153:36
   153|   let a: Array<{[k: string]: B, p: A}> = x; // error: A ~> B
                                           ^ [1]
   dictionary.js:151:26
   151|   x: Array<{[k: string]: B}>,
                                 ^ [2]


Error --------------------------------------------------------------------------------------------- dictionary.js:158:42

Cannot assign `x` to `c` because `B` [1] is incompatible with `C` [2] in property `p` of array element. This property is
invariantly typed. See https://flow.org/en/docs/faq/#why-cant-i-pass-a-string-to-a-function-that-takes-a-string-number.
[incompatible-type]

   dictionary.js:158:42
   158|   let c: Array<{[k: string]: B, p: C}> = x; // error
                                                 ^

References:
   dictionary.js:151:26
   151|   x: Array<{[k: string]: B}>,
                                 ^ [1]
   dictionary.js:158:36
   158|   let c: Array<{[k: string]: B, p: C}> = x; // error
                                           ^ [2]


Error ---------------------------------------------------------------------------------------------- dictionary.js:159:3

Cannot cast `x[0].p` to `C` because `B` [1] is incompatible with `C` [2]. [incompatible-cast]

   dictionary.js:159:3
   159|   x[0].p as C; // not true
          ^^^^^^

References:
   dictionary.js:151:26
   151|   x: Array<{[k: string]: B}>,
                                 ^ [1]
   dictionary.js:159:13
   159|   x[0].p as C; // not true
                    ^ [2]


Error --------------------------------------------------------------------------------------------- dictionary.js:167:36

Cannot assign `xa` to `a` because `A` [1] is incompatible with `B` [2] in property `p` of array element. This property
is invariantly typed. See
https://flow.org/en/docs/faq/#why-cant-i-pass-a-string-to-a-function-that-takes-a-string-number. [incompatible-type]

   dictionary.js:167:36
   167|   let a: Array<{[k: string]: A}> = xa; // error
                                           ^^

References:
   dictionary.js:167:30
   167|   let a: Array<{[k: string]: A}> = xa; // error
                                     ^ [1]
   dictionary.js:163:33
   163|   xa: Array<{[k: string]: A, p: B}>,
                                        ^ [2]


Error --------------------------------------------------------------------------------------------- dictionary.js:172:36

Cannot assign `xc` to `c` because `B` [1] is incompatible with `C` [2] in property `p` of array element.
[incompatible-type]

   dictionary.js:172:36
   172|   let c: Array<{[k: string]: C}> = xc; // error
                                           ^^

References:
   dictionary.js:165:33
   165|   xc: Array<{[k: string]: C, p: B}>,
                                        ^ [1]
   dictionary.js:172:30
   172|   let c: Array<{[k: string]: C}> = xc; // error
                                     ^ [2]


Error ---------------------------------------------------------------------------------------------- dictionary.js:173:3

Cannot cast `xc[0].p` to `C` because `B` [1] is incompatible with `C` [2]. [incompatible-cast]

   dictionary.js:173:3
   173|   xc[0].p as C; // not true
          ^^^^^^^

References:
   dictionary.js:165:33
   165|   xc: Array<{[k: string]: C, p: B}>,
                                        ^ [1]
   dictionary.js:173:14
   173|   xc[0].p as C; // not true
                     ^ [2]


Error --------------------------------------------------------------------------------------------- dictionary.js:177:35

Cannot assign `x` to `a` because `A` [1] is incompatible with `B` [2] in property `p`. This property is invariantly
typed. See https://flow.org/en/docs/faq/#why-cant-i-pass-a-string-to-a-function-that-takes-a-string-number.
[incompatible-type]

   dictionary.js:177:35
   177|   let a: {[k: string]: B, p: A} = x; // error: A ~> B
                                          ^

References:
   dictionary.js:177:30
   177|   let a: {[k: string]: B, p: A} = x; // error: A ~> B
                                     ^ [1]
   dictionary.js:176:71
   176| function subtype_mix_with_declared_props_invariant_l(x: {[k: string]: B}) {
                                                                              ^ [2]


Error --------------------------------------------------------------------------------------------- dictionary.js:182:35

Cannot assign `x` to `c` because `B` [1] is incompatible with `C` [2] in property `p`. [incompatible-type]

   dictionary.js:182:35
   182|   let c: {[k: string]: B, p: C} = x; // error
                                          ^

References:
   dictionary.js:176:71
   176| function subtype_mix_with_declared_props_invariant_l(x: {[k: string]: B}) {
                                                                              ^ [1]
   dictionary.js:182:30
   182|   let c: {[k: string]: B, p: C} = x; // error
                                     ^ [2]


Error ---------------------------------------------------------------------------------------------- dictionary.js:183:3

Cannot cast `x.p` to `C` because `B` [1] is incompatible with `C` [2]. [incompatible-cast]

   dictionary.js:183:3
   183|   x.p as C; // not true
          ^^^

References:
   dictionary.js:176:71
   176| function subtype_mix_with_declared_props_invariant_l(x: {[k: string]: B}) {
                                                                              ^ [1]
   dictionary.js:183:10
   183|   x.p as C; // not true
                 ^ [2]


Error --------------------------------------------------------------------------------------------- dictionary.js:191:29

Cannot assign `xa` to `a` because `A` [1] is incompatible with `B` [2] in property `p`. This property is invariantly
typed. See https://flow.org/en/docs/faq/#why-cant-i-pass-a-string-to-a-function-that-takes-a-string-number.
[incompatible-type]

   dictionary.js:191:29
   191|   let a: {[k: string]: A} = xa; // error
                                    ^^

References:
   dictionary.js:191:24
   191|   let a: {[k: string]: A} = xa; // error
                               ^ [1]
   dictionary.js:187:27
   187|   xa: {[k: string]: A, p: B},
                                  ^ [2]


Error --------------------------------------------------------------------------------------------- dictionary.js:196:29

Cannot assign `xc` to `c` because `B` [1] is incompatible with `C` [2] in property `p`. [incompatible-type]

   dictionary.js:196:29
   196|   let c: {[k: string]: C} = xc; // error
                                    ^^

References:
   dictionary.js:189:27
   189|   xc: {[k: string]: C, p: B},
                                  ^ [1]
   dictionary.js:196:24
   196|   let c: {[k: string]: C} = xc; // error
                               ^ [2]


Error ---------------------------------------------------------------------------------------------- dictionary.js:197:3

Cannot cast `xc.p` to `C` because `B` [1] is incompatible with `C` [2]. [incompatible-cast]

   dictionary.js:197:3
   197|   xc.p as C; // not true
          ^^^^

References:
   dictionary.js:189:27
   189|   xc: {[k: string]: C, p: B},
                                  ^ [1]
   dictionary.js:197:11
   197|   xc.p as C; // not true
                  ^ [2]


Error --------------------------------------------------------------------------------------------- dictionary.js:201:10

Cannot return `x` because an index signature declaring the expected key / value type is missing in object type [1] but
exists in object type [2] in array element. [prop-missing]

   dictionary.js:201:10
   201|   return x; // error: if allowed, could write {p:X,q:Y} into `x`
                 ^

References:
   dictionary.js:200:69
   200| function unification_dict_to_obj(x: Array<{[k: string]: X}>): Array<{p: X}> {
                                                                            ^^^^^^ [1]
   dictionary.js:200:43
   200| function unification_dict_to_obj(x: Array<{[k: string]: X}>): Array<{p: X}> {
                                                  ^^^^^^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------- dictionary.js:205:10

Cannot return `x` because an index signature declaring the expected key / value type is missing in object type [1] but
exists in object type [2] in array element. Arrays are invariantly typed. See
https://flow.org/en/docs/faq/#why-cant-i-pass-an-arraystring-to-a-function-that-takes-an-arraystring-number.
[prop-missing]

   dictionary.js:205:10
   205|   return x; // error: if allowed, could write {p:X,q:Y} into returned array
                 ^

References:
   dictionary.js:204:43
   204| function unification_obj_to_dict(x: Array<{p: X}>): Array<{[k: string]: X}> {
                                                  ^^^^^^ [1]
   dictionary.js:204:59
   204| function unification_obj_to_dict(x: Array<{p: X}>): Array<{[k: string]: X}> {
                                                                  ^^^^^^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------- dictionary.js:209:19

Cannot assign `x` to `a` because `A` [1] is incompatible with `B` [2] in property `p`. This property is invariantly
typed. See https://flow.org/en/docs/faq/#why-cant-i-pass-a-string-to-a-function-that-takes-a-string-number.
[incompatible-type]

   dictionary.js:209:19
   209|   let a: {p: A} = x; // error
                          ^

References:
   dictionary.js:209:14
   209|   let a: {p: A} = x; // error
                     ^ [1]
   dictionary.js:208:47
   208| function subtype_dict_to_obj(x: {[k: string]: B}) {
                                                      ^ [2]


Error --------------------------------------------------------------------------------------------- dictionary.js:214:19

Cannot assign `x` to `c` because `B` [1] is incompatible with `C` [2] in property `p`. [incompatible-type]

   dictionary.js:214:19
   214|   let c: {p: C} = x; // error
                          ^

References:
   dictionary.js:208:47
   208| function subtype_dict_to_obj(x: {[k: string]: B}) {
                                                      ^ [1]
   dictionary.js:214:14
   214|   let c: {p: C} = x; // error
                     ^ [2]


Error ---------------------------------------------------------------------------------------------- dictionary.js:215:3

Cannot cast `x.p` to `C` because `B` [1] is incompatible with `C` [2]. [incompatible-cast]

   dictionary.js:215:3
   215|   x.p as C; // not true
          ^^^

References:
   dictionary.js:208:47
   208| function subtype_dict_to_obj(x: {[k: string]: B}) {
                                                      ^ [1]
   dictionary.js:215:10
   215|   x.p as C; // not true
                 ^ [2]


Error --------------------------------------------------------------------------------------------- dictionary.js:219:29

Cannot assign `x` to `a` because `A` [1] is incompatible with `B` [2] in property `p`. This property is invariantly
typed. See https://flow.org/en/docs/faq/#why-cant-i-pass-a-string-to-a-function-that-takes-a-string-number.
[incompatible-type]

   dictionary.js:219:29
   219|   let a: {[k: string]: A} = x; // error
                                    ^

References:
   dictionary.js:219:24
   219|   let a: {[k: string]: A} = x; // error
                               ^ [1]
   dictionary.js:218:38
   218| function subtype_obj_to_dict(x: {|p: B|}) {
                                             ^ [2]


Error --------------------------------------------------------------------------------------------- dictionary.js:224:29

Cannot assign `x` to `c` because `B` [1] is incompatible with `C` [2] in property `p`. [incompatible-type]

   dictionary.js:224:29
   224|   let c: {[k: string]: C} = x; // error
                                    ^

References:
   dictionary.js:218:38
   218| function subtype_obj_to_dict(x: {|p: B|}) {
                                             ^ [1]
   dictionary.js:224:24
   224|   let c: {[k: string]: C} = x; // error
                               ^ [2]


Error ---------------------------------------------------------------------------------------------- dictionary.js:225:3

Cannot cast `x.p` to `C` because `B` [1] is incompatible with `C` [2]. [incompatible-cast]

   dictionary.js:225:3
   225|   x.p as C; // not true
          ^^^

References:
   dictionary.js:218:38
   218| function subtype_obj_to_dict(x: {|p: B|}) {
                                             ^ [1]
   dictionary.js:225:10
   225|   x.p as C; // not true
                 ^ [2]


Error --------------------------------------------------------------------------------------------- dictionary.js:231:35

Cannot assign `x` to `a` because `A` [1] is incompatible with `B` [2] in property `p`. This property is invariantly
typed. See https://flow.org/en/docs/faq/#why-cant-i-pass-a-string-to-a-function-that-takes-a-string-number.
[incompatible-type]

   dictionary.js:231:35
   231|   let a: {[k: string]: A, x: X} = x; // error (as above), but exclusive of x
                                          ^

References:
   dictionary.js:231:24
   231|   let a: {[k: string]: A, x: X} = x; // error (as above), but exclusive of x
                               ^ [1]
   dictionary.js:230:39
   230| function subtype_obj_to_mixed(x: {|p: B, x: X|}) {
                                              ^ [2]


Error --------------------------------------------------------------------------------------------- dictionary.js:233:35

Cannot assign `x` to `c` because `B` [1] is incompatible with `C` [2] in property `p`. [incompatible-type]

   dictionary.js:233:35
   233|   let c: {[k: string]: C, x: X} = x; // error (as above), but exclusive of x
                                          ^

References:
   dictionary.js:230:39
   230| function subtype_obj_to_mixed(x: {|p: B, x: X|}) {
                                              ^ [1]
   dictionary.js:233:24
   233|   let c: {[k: string]: C, x: X} = x; // error (as above), but exclusive of x
                               ^ [2]


Error --------------------------------------------------------------------------------------------- dictionary.js:237:42

Cannot assign `x` to `a` because `A` [1] is incompatible with `B` [2] in property `p` of array element.
[incompatible-type]

   dictionary.js:237:42
   237|   let a: Array<{[k: string]: B, p: A}> = x; // error
                                                 ^

References:
   dictionary.js:237:36
   237|   let a: Array<{[k: string]: B, p: A}> = x; // error
                                           ^ [1]
   dictionary.js:236:59
   236| function unification_dict_to_mixed(x: Array<{[k: string]: B}>) {
                                                                  ^ [2]


Error --------------------------------------------------------------------------------------------- dictionary.js:239:42

Cannot assign `x` to `c` because `B` [1] is incompatible with `C` [2] in property `p` of array element. This property is
invariantly typed. See https://flow.org/en/docs/faq/#why-cant-i-pass-a-string-to-a-function-that-takes-a-string-number.
[incompatible-type]

   dictionary.js:239:42
   239|   let c: Array<{[k: string]: B, p: C}> = x; // error
                                                 ^

References:
   dictionary.js:236:59
   236| function unification_dict_to_mixed(x: Array<{[k: string]: B}>) {
                                                                  ^ [1]
   dictionary.js:239:36
   239|   let c: Array<{[k: string]: B, p: C}> = x; // error
                                           ^ [2]


Error --------------------------------------------------------------------------------------------- dictionary.js:243:35

Cannot assign `x` to `a` because `A` [1] is incompatible with `B` [2] in property `p`. This property is invariantly
typed. See https://flow.org/en/docs/faq/#why-cant-i-pass-a-string-to-a-function-that-takes-a-string-number.
[incompatible-type]

   dictionary.js:243:35
   243|   let a: {[k: string]: B, p: A} = x; // error
                                          ^

References:
   dictionary.js:243:30
   243|   let a: {[k: string]: B, p: A} = x; // error
                                     ^ [1]
   dictionary.js:242:49
   242| function subtype_dict_to_mixed(x: {[k: string]: B}) {
                                                        ^ [2]


Error --------------------------------------------------------------------------------------------- dictionary.js:245:35

Cannot assign `x` to `c` because `B` [1] is incompatible with `C` [2] in property `p`. [incompatible-type]

   dictionary.js:245:35
   245|   let c: {[k: string]: B, p: C} = x; // error
                                          ^

References:
   dictionary.js:242:49
   242| function subtype_dict_to_mixed(x: {[k: string]: B}) {
                                                        ^ [1]
   dictionary.js:245:30
   245|   let c: {[k: string]: B, p: C} = x; // error
                                     ^ [2]


Error --------------------------------------------------------------------------------------------- dictionary.js:249:20

Cannot assign `x` to `a` because `A` [1] is incompatible with `B` [2] in property `p`. This property is invariantly
typed. See https://flow.org/en/docs/faq/#why-cant-i-pass-a-string-to-a-function-that-takes-a-string-number.
[incompatible-type]

   dictionary.js:249:20
   249|   let a: {p?: A} = x; // error
                           ^

References:
   dictionary.js:249:15
   249|   let a: {p?: A} = x; // error
                      ^ [1]
   dictionary.js:248:54
   248| function subtype_dict_to_optional_a(x: {[k: string]: B}) {
                                                             ^ [2]


Error --------------------------------------------------------------------------------------------- dictionary.js:257:20

Cannot assign `x` to `c` because `B` [1] is incompatible with `C` [2] in property `p`. [incompatible-type]

   dictionary.js:257:20
   257|   let c: {p?: C} = x; // error
                           ^

References:
   dictionary.js:256:54
   256| function subtype_dict_to_optional_c(x: {[k: string]: B}) {
                                                             ^ [1]
   dictionary.js:257:15
   257|   let c: {p?: C} = x; // error
                      ^ [2]


Error --------------------------------------------------------------------------------------------- dictionary.js:262:10

Cannot return `x` because `A` [1] is incompatible with `B` [2] in property `p`. [incompatible-return]

   dictionary.js:262:10
   262|   return x;
                 ^

References:
   dictionary.js:260:46
   260| function subtype_optional_a_to_dict(x: {|p?: A|}): {[k: string]: B} {
                                                     ^ [1]
   dictionary.js:260:66
   260| function subtype_optional_a_to_dict(x: {|p?: A|}): {[k: string]: B} {
                                                                         ^ [2]


Error --------------------------------------------------------------------------------------------- dictionary.js:272:10

Cannot return `x` because `B` [1] is incompatible with `C` [2] in property `p`. This property is invariantly typed. See
https://flow.org/en/docs/faq/#why-cant-i-pass-a-string-to-a-function-that-takes-a-string-number. [incompatible-return]

   dictionary.js:272:10
   272|   return x;
                 ^

References:
   dictionary.js:270:66
   270| function subtype_optional_c_to_dict(x: {|p?: C|}): {[k: string]: B} {
                                                                         ^ [1]
   dictionary.js:270:46
   270| function subtype_optional_c_to_dict(x: {|p?: C|}): {[k: string]: B} {
                                                     ^ [2]


Error --------------------------------------------------------------------------------------------- incompatible.js:4:34

Cannot assign `x` to `y` because string [1] is incompatible with number [2] in the indexer property. [incompatible-type]

   incompatible.js:4:34
   4| var y: {[key: string]: number} = x; // 2 errors, number !~> string & vice versa
                                       ^

References:
   incompatible.js:3:24
   3| var x: {[key: string]: string} = {};
                             ^^^^^^ [1]
   incompatible.js:4:24
   4| var y: {[key: string]: number} = x; // 2 errors, number !~> string & vice versa
                             ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------- incompatible.js:5:34

Cannot assign `x` to `z` because string [1] is incompatible with number [2] in the indexer property's key.
[incompatible-type]

   incompatible.js:5:34
   5| var z: {[key: number]: string} = x; // 2 errors, string !~> number & vice versa
                                       ^

References:
   incompatible.js:3:15
   3| var x: {[key: string]: string} = {};
                    ^^^^^^ [1]
   incompatible.js:5:15
   5| var z: {[key: number]: string} = x; // 2 errors, string !~> number & vice versa
                    ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------- incompatible.js:8:34

Cannot assign `a` to `b` because null or undefined [1] is incompatible with string [2] in the indexer property.
[incompatible-type]

   incompatible.js:8:34
   8| var b: {[key: string]: string} = a; // 2 errors (null & undefined)
                                       ^

References:
   incompatible.js:7:24
   7| var a: {[key: string]: ?string} = {};
                             ^^^^^^^ [1]
   incompatible.js:8:24
   8| var b: {[key: string]: string} = a; // 2 errors (null & undefined)
                             ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------- incompatible.js:9:35

Cannot assign `b` to `c` because null or undefined [1] is incompatible with string [2] in the indexer property. This
property is invariantly typed. See
https://flow.org/en/docs/faq/#why-cant-i-pass-a-string-to-a-function-that-takes-a-string-number. [incompatible-type]

   incompatible.js:9:35
   9| var c: {[key: string]: ?string} = b; // 2 errors, since c['x'] = null updates b
                                        ^

References:
   incompatible.js:9:24
   9| var c: {[key: string]: ?string} = b; // 2 errors, since c['x'] = null updates b
                             ^^^^^^^ [1]
   incompatible.js:8:24
   8| var b: {[key: string]: string} = a; // 2 errors (null & undefined)
                             ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- incompatible.js:15:10

Cannot return `x` because number [1] is incompatible with string [2] in the indexer property of array element.
[incompatible-return]

   incompatible.js:15:10
   15|   return x;
                ^

References:
   incompatible.js:13:28
   13|   x: Array<{[key: string]: number}>,
                                  ^^^^^^ [1]
   incompatible.js:14:26
   14| ): Array<{[key: string]: string}> {
                                ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- incompatible.js:22:10

Cannot return `x` because string [1] is incompatible with number [2] in property `fooBar` of array element.
[incompatible-return]

   incompatible.js:22:10
   22|   return x;
                ^

References:
   incompatible.js:21:42
   21| ): Array<{[key: string]: number, fooBar: string}> {
                                                ^^^^^^ [1]
   incompatible.js:20:28
   20|   x: Array<{[key: string]: number}>,
                                  ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- incompatible.js:29:10

Cannot return `x` because mixed [1] is incompatible with string [2] in property `fooBar` of array element. This property
is invariantly typed. See
https://flow.org/en/docs/faq/#why-cant-i-pass-a-string-to-a-function-that-takes-a-string-number. [incompatible-return]

   incompatible.js:29:10
   29|   return x; // error: mixed ~> string
                ^

References:
   incompatible.js:26:28
   26|   x: Array<{[key: string]: mixed}>,
                                  ^^^^^ [1]
   incompatible.js:27:41
   27| ): Array<{[key: string]: mixed, fooBar: string}> {
                                               ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- incompatible.js:42:10

Cannot return `x` because number [1] is incompatible with string [2] in property `foo`. [incompatible-return]

   incompatible.js:42:10
   42|   return x;
                ^

References:
   incompatible.js:38:34
   38| function foo4(x: {[key: string]: number}): {
                                        ^^^^^^ [1]
   incompatible.js:40:8
   40|   foo: string,
              ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- incompatible.js:47:10

Cannot return `x` because an index signature declaring the expected key / value type is missing in object type [1] but
exists in object type [2] in array element. [prop-missing]

   incompatible.js:47:10
   47|   return x;
                ^

References:
   incompatible.js:46:57
   46| function foo5(x: Array<{[key: string]: number}>): Array<{foo: number}> {
                                                               ^^^^^^^^^^^^^ [1]
   incompatible.js:46:24
   46| function foo5(x: Array<{[key: string]: number}>): Array<{foo: number}> {
                              ^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------- incompatible.js:52:10

Cannot return `x` because an index signature declaring the expected key / value type is missing in object type [1] but
exists in object type [2] in array element. Arrays are invariantly typed. See
https://flow.org/en/docs/faq/#why-cant-i-pass-an-arraystring-to-a-function-that-takes-an-arraystring-number.
[prop-missing]

   incompatible.js:52:10
   52|   return x;
                ^

References:
   incompatible.js:51:24
   51| function foo6(x: Array<{foo: number}>): Array<{[key: string]: number}> {
                              ^^^^^^^^^^^^^ [1]
   incompatible.js:51:47
   51| function foo6(x: Array<{foo: number}>): Array<{[key: string]: number}> {
                                                     ^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------------- incompatible.js:60:3

Cannot cast `x.foo` to string because number [1] is incompatible with string [2]. [incompatible-cast]

   incompatible.js:60:3
   60|   x.foo as string; // error
         ^^^^^

References:
   incompatible.js:59:34
   59| function foo8(x: {[key: string]: number}) {
                                        ^^^^^^ [1]
   incompatible.js:60:12
   60|   x.foo as string; // error
                  ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:6:12

Cannot assign object literal to `o` because number [1] is incompatible with string [2] in the return value of property
`foo`. [incompatible-type]

   test.js:6:12
   6|     return params.count; // error, number ~/~ string
                 ^^^^^^^^^^^^

References:
   test.js:1:23
   1| type Params = {count: number; [name: string]: string};
                            ^^^^^^ [1]
   test.js:2:42
   2| type QueryFunction = (params: Params) => string;
                                               ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- test_client.js:3:9

Cannot assign function to `o.foo` because number [1] is incompatible with string [2] in the return value.
[incompatible-type]

   test_client.js:3:9
   3| o.foo = function (params) {
              ^^^^^^^^^^^^^^^^^

References:
   test.js:1:23
   1| type Params = {count: number; [name: string]: string};
                            ^^^^^^ [1]
   test.js:2:42
   2| type QueryFunction = (params: Params) => string;
                                               ^^^^^^ [2]



Found 63 errors
