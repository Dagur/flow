Error ------------------------------------------------------------------------------------------ import-primitive.js:6:3

Cannot cast `n` to number literal `2` because number literal `1` [1] is incompatible with number literal `2` [2].
[incompatible-cast]

   import-primitive.js:6:3
   6|   n as 2; // error 1 ~> 2
        ^

References:
   primitive.js:1:18
   1| export const n = 1 as const;
                       ^ [1]
   import-primitive.js:6:8
   6|   n as 2; // error 1 ~> 2
             ^ [2]


Error ------------------------------------------------------------------------------------------ import-primitive.js:9:3

Cannot cast `2` to `typeof n` because number [1] is incompatible with number literal `1` [2]. [incompatible-cast]

   import-primitive.js:9:3
   9|   2 as typeof n; // error 2 ~> 1
        ^ [1]

References:
   import-primitive.js:9:8
   9|   2 as typeof n; // error 2 ~> 1
             ^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------- import-primitive.js:10:8

Cannot cast `2` to `typeof n` because number [1] is incompatible with number literal `1` [2]. [incompatible-cast]

   import-primitive.js:10:8
   10|   2 as number as typeof n; // error number ~> 1
              ^^^^^^ [1]

References:
   import-primitive.js:10:18
   10|   2 as number as typeof n; // error number ~> 1
                        ^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------- import-primitive.js:16:3

Cannot cast `s` to string literal `b` because string literal `a` [1] is incompatible with string literal `b` [2].
[incompatible-cast]

   import-primitive.js:16:3
   16|   s as "b"; // error a ~> b
         ^

References:
   primitive.js:2:18
    2| export const s = "a" as const;
                        ^^^ [1]
   import-primitive.js:16:8
   16|   s as "b"; // error a ~> b
              ^^^ [2]


Error ----------------------------------------------------------------------------------------- import-primitive.js:19:3

Cannot cast `"b"` to `typeof s` because string [1] is incompatible with string literal `a` [2]. [incompatible-cast]

   import-primitive.js:19:3
   19|   "b" as typeof s; // error b ~> a
         ^^^ [1]

References:
   import-primitive.js:19:10
   19|   "b" as typeof s; // error b ~> a
                ^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------- import-primitive.js:20:10

Cannot cast `"b"` to `typeof s` because string [1] is incompatible with string literal `a` [2]. [incompatible-cast]

   import-primitive.js:20:10
   20|   "b" as string as typeof s; // error string ~> a
                ^^^^^^ [1]

References:
   import-primitive.js:20:20
   20|   "b" as string as typeof s; // error string ~> a
                          ^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------- import-primitive.js:26:3

Cannot cast `b` to boolean literal `false` because boolean literal `true` [1] is incompatible with boolean literal
`false` [2]. [incompatible-cast]

   import-primitive.js:26:3
   26|   b as false; // error true ~> false
         ^

References:
   primitive.js:3:18
    3| export const b = true as const;
                        ^^^^ [1]
   import-primitive.js:26:8
   26|   b as false; // error true ~> false
              ^^^^^ [2]


Error ----------------------------------------------------------------------------------------- import-primitive.js:29:3

Cannot cast `false` to `typeof b` because boolean [1] is incompatible with boolean literal `true` [2].
[incompatible-cast]

   import-primitive.js:29:3
   29|   false as typeof b; // error false ~> true
         ^^^^^ [1]

References:
   import-primitive.js:29:12
   29|   false as typeof b; // error false ~> true
                  ^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------- import-primitive.js:30:12

Cannot cast `false` to `typeof b` because boolean [1] is incompatible with boolean literal `true` [2].
[incompatible-cast]

   import-primitive.js:30:12
   30|   false as boolean as typeof b; // error bool ~> true
                  ^^^^^^^ [1]

References:
   import-primitive.js:30:23
   30|   false as boolean as typeof b; // error bool ~> true
                             ^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------- import-primitive.js:36:3

Cannot cast `bi` to bigint literal `2n` because bigint literal `1n` [1] is incompatible with bigint literal `2n` [2].
[incompatible-cast]

   import-primitive.js:36:3
   36|   bi as 2n; // error 1n ~> 2n
         ^^

References:
   primitive.js:4:19
    4| export const bi = 1n as const;
                         ^^ [1]
   import-primitive.js:36:9
   36|   bi as 2n; // error 1n ~> 2n
               ^^ [2]


Error ----------------------------------------------------------------------------------------- import-primitive.js:39:3

Cannot cast `2n` to `typeof bi` because bigint [1] is incompatible with bigint literal `1n` [2]. [incompatible-cast]

   import-primitive.js:39:3
   39|   2n as typeof bi; // error 2n ~> 1n
         ^^ [1]

References:
   import-primitive.js:39:9
   39|   2n as typeof bi; // error 2n ~> 1n
               ^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------- import-primitive.js:40:9

Cannot cast `2n` to `typeof bi` because bigint [1] is incompatible with bigint literal `1n` [2]. [incompatible-cast]

   import-primitive.js:40:9
   40|   2n as bigint as typeof bi; // error bigint ~> 1n
               ^^^^^^ [1]

References:
   import-primitive.js:40:19
   40|   2n as bigint as typeof bi; // error bigint ~> 1n
                         ^^^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- invalid.js:14:1

The `as const` assertion can only be used on string, numeric, boolean, object, or array literals. [unsupported-syntax]

   14| one as const; // error variable is not a literal
       ^^^


Error -------------------------------------------------------------------------------------------------- invalid.js:15:2

The `as const` assertion can only be used on string, numeric, boolean, object, or array literals. [unsupported-syntax]

   15| (function f() {}) as const; // error function is not a literal
        ^^^^^^^^^^^^^^^


Error -------------------------------------------------------------------------------------------------- invalid.js:16:2

The `as const` assertion can only be used on string, numeric, boolean, object, or array literals. [unsupported-syntax]

   16| (class C {}) as const; // error class is not a literal
        ^^^^^^^^^^


Error -------------------------------------------------------------------------------------------------- invalid.js:17:1

The `as const` assertion can only be used on string, numeric, boolean, object, or array literals. [unsupported-syntax]

   17| 1 as const as const; // error as const is not a literal
       ^^^^^^^^^^


Error -------------------------------------------------------------------------------------------------- invalid.js:18:1

The `as const` assertion can only be used on string, numeric, boolean, object, or array literals. [unsupported-syntax]

   18| 1 + 1 as const; // error binary operation is not a literal
       ^^^^^


Error -------------------------------------------------------------------------------------------------- invalid.js:19:1

The `as const` assertion can only be used on string, numeric, boolean, object, or array literals. [unsupported-syntax]

   19| 1 as number as const; // error cast expression is not a literal
       ^^^^^^^^^^^


Error -------------------------------------------------------------------------------------------------- invalid.js:20:1

The `as const` assertion can only be used on string, numeric, boolean, object, or array literals. [unsupported-syntax]

   20| null as const; // error null is not a supported literal
       ^^^^


Error -------------------------------------------------------------------------------------------------- invalid.js:21:1

The `as const` assertion can only be used on string, numeric, boolean, object, or array literals. [unsupported-syntax]

   21| undefined as const; // error undefined is not a supported literal
       ^^^^^^^^^


Error -------------------------------------------------------------------------------------------------- invalid.js:22:1

The `as const` assertion can only be used on string, numeric, boolean, object, or array literals. [unsupported-syntax]

   22| foo() as const; // error function call is not a literal
       ^^^^^


Error ------------------------------------------------------------------------------------------------- primitive.js:9:3

Cannot cast `n` to number literal `2` because number literal `1` [1] is incompatible with number literal `2` [2].
[incompatible-cast]

   primitive.js:9:3
   9|   n as 2; // error 1 ~> 2
        ^

References:
   primitive.js:1:18
   1| export const n = 1 as const;
                       ^ [1]
   primitive.js:9:8
   9|   n as 2; // error 1 ~> 2
             ^ [2]


Error ------------------------------------------------------------------------------------------------ primitive.js:12:3

Cannot cast `2` to `typeof n` because number [1] is incompatible with number literal `1` [2]. [incompatible-cast]

   primitive.js:12:3
   12|   2 as typeof n; // error 2 ~> 1
         ^ [1]

References:
   primitive.js:12:8
   12|   2 as typeof n; // error 2 ~> 1
              ^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ primitive.js:13:8

Cannot cast `2` to `typeof n` because number [1] is incompatible with number literal `1` [2]. [incompatible-cast]

   primitive.js:13:8
   13|   2 as number as typeof n; // error number ~> 1
              ^^^^^^ [1]

References:
   primitive.js:13:18
   13|   2 as number as typeof n; // error number ~> 1
                        ^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ primitive.js:19:3

Cannot cast `s` to string literal `b` because string literal `a` [1] is incompatible with string literal `b` [2].
[incompatible-cast]

   primitive.js:19:3
   19|   s as "b"; // error a ~> b
         ^

References:
   primitive.js:2:18
    2| export const s = "a" as const;
                        ^^^ [1]
   primitive.js:19:8
   19|   s as "b"; // error a ~> b
              ^^^ [2]


Error ------------------------------------------------------------------------------------------------ primitive.js:22:3

Cannot cast `"b"` to `typeof s` because string [1] is incompatible with string literal `a` [2]. [incompatible-cast]

   primitive.js:22:3
   22|   "b" as typeof s; // error b ~> a
         ^^^ [1]

References:
   primitive.js:22:10
   22|   "b" as typeof s; // error b ~> a
                ^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- primitive.js:23:10

Cannot cast `"b"` to `typeof s` because string [1] is incompatible with string literal `a` [2]. [incompatible-cast]

   primitive.js:23:10
   23|   "b" as string as typeof s; // error string ~> a
                ^^^^^^ [1]

References:
   primitive.js:23:20
   23|   "b" as string as typeof s; // error string ~> a
                          ^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ primitive.js:29:3

Cannot cast `b` to boolean literal `false` because boolean literal `true` [1] is incompatible with boolean literal
`false` [2]. [incompatible-cast]

   primitive.js:29:3
   29|   b as false; // error true ~> false
         ^

References:
   primitive.js:3:18
    3| export const b = true as const;
                        ^^^^ [1]
   primitive.js:29:8
   29|   b as false; // error true ~> false
              ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ primitive.js:32:3

Cannot cast `false` to `typeof b` because boolean [1] is incompatible with boolean literal `true` [2].
[incompatible-cast]

   primitive.js:32:3
   32|   false as typeof b; // error false ~> true
         ^^^^^ [1]

References:
   primitive.js:32:12
   32|   false as typeof b; // error false ~> true
                  ^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- primitive.js:33:12

Cannot cast `false` to `typeof b` because boolean [1] is incompatible with boolean literal `true` [2].
[incompatible-cast]

   primitive.js:33:12
   33|   false as boolean as typeof b; // error bool ~> true
                  ^^^^^^^ [1]

References:
   primitive.js:33:23
   33|   false as boolean as typeof b; // error bool ~> true
                             ^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ primitive.js:39:3

Cannot cast `bi` to bigint literal `2n` because bigint literal `1n` [1] is incompatible with bigint literal `2n` [2].
[incompatible-cast]

   primitive.js:39:3
   39|   bi as 2n; // error 1n ~> 2n
         ^^

References:
   primitive.js:4:19
    4| export const bi = 1n as const;
                         ^^ [1]
   primitive.js:39:9
   39|   bi as 2n; // error 1n ~> 2n
               ^^ [2]


Error ------------------------------------------------------------------------------------------------ primitive.js:42:3

Cannot cast `2n` to `typeof bi` because bigint [1] is incompatible with bigint literal `1n` [2]. [incompatible-cast]

   primitive.js:42:3
   42|   2n as typeof bi; // error 2n ~> 1n
         ^^ [1]

References:
   primitive.js:42:9
   42|   2n as typeof bi; // error 2n ~> 1n
               ^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ primitive.js:43:9

Cannot cast `2n` to `typeof bi` because bigint [1] is incompatible with bigint literal `1n` [2]. [incompatible-cast]

   primitive.js:43:9
   43|   2n as bigint as typeof bi; // error bigint ~> 1n
               ^^^^^^ [1]

References:
   primitive.js:43:19
   43|   2n as bigint as typeof bi; // error bigint ~> 1n
                         ^^^^^^^^^ [2]



Found 33 errors
