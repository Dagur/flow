Error --------------------------------------------------------------------------------------- declare_hook_tests.js:3:13

Cannot call hook [1] because React hooks can only be called within components or hooks. [react-rule-hook]

   declare_hook_tests.js:3:13
   3| const [v] = useCustom({a: 42});
                  ^^^^^^^^^^^^^^^^^^

References:
   declare_hook_tests.js:3:13
   3| const [v] = useCustom({a: 42});
                  ^^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------- declare_hook_tests.js:4:3

Cannot assign `100` to `v.a` because property `a` is not writable. The return value of a React hook [1] cannot be
written to. [react-rule-hook-mutation]

   declare_hook_tests.js:4:3
   4| v.a = 100; // Error, x is not writable
        ^

References:
   declare_hook_tests.js:1:23
   1| declare hook useCustom<T>(x: T): [T];
                            ^^^^^^^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------- declare_hook_tests.js:6:1

Cannot cast `useCustom` to function type because function type [1] is a React hook type annotation but function type [2]
is not a hook. React hooks and other functions are not compatible with each other, because hooks cannot be called
conditionally. [react-rule-hook-incompatible]

   declare_hook_tests.js:6:1
   6| useCustom as <T>(T) => [T]; // error, hook and nonhook incompatible
      ^^^^^^^^^

References:
   declare_hook_tests.js:1:23
   1| declare hook useCustom<T>(x: T): [T];
                            ^^^^^^^^^^^^^^ [1]
   declare_hook_tests.js:6:14
   6| useCustom as <T>(T) => [T]; // error, hook and nonhook incompatible
                   ^^^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------- declare_hook_tests.js:10:1

Cannot cast `nonhook` to `typeof useCustom` because function type [1] is not a React hook but function type [2] is a
hook type annotation. React hooks and other functions are not compatible with each other, because hooks cannot be called
conditionally. [react-rule-hook-incompatible]

   declare_hook_tests.js:10:1
   10| nonhook as typeof useCustom; // error, nonhook and hook incompatible
       ^^^^^^^

References:
   declare_hook_tests.js:9:24
    9| declare const nonhook: <T>(T) => [T];
                              ^^^^^^^^^^^^^ [1]
   declare_hook_tests.js:1:23
    1| declare hook useCustom<T>(x: T): [T];
                             ^^^^^^^^^^^^^^ [2]


Error --------------------------------------------------------------------------------------- declare_hook_tests.js:23:5

Cannot call hook [1] because React hooks can only be called within components or hooks. [react-rule-hook]

   declare_hook_tests.js:23:5
   23|     useBadHook([], (42: any)); // error
           ^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   declare_hook_tests.js:23:5
   23|     useBadHook([], (42: any)); // error
           ^^^^^^^^^^ [1]


Error --------------------------------------------------------------------------------------- declare_hook_tests.js:25:5

Cannot call hook [1] because React hooks can only be called within components or hooks. [react-rule-hook]

   declare_hook_tests.js:25:5
   25|     badName([], (42: any)); // error
           ^^^^^^^^^^^^^^^^^^^^^^

References:
   declare_hook_tests.js:25:5
   25|     badName([], (42: any)); // error
           ^^^^^^^ [1]


Error --------------------------------------------------------------------------------------- declare_hook_tests.js:34:5

Cannot call hook because callee [1]'s name does not conform to React hook rules. Hook names must begin with `use`
followed by a capitalized letter. [react-rule-hook]

   declare_hook_tests.js:34:5
   34|     badName([], (42: any)); // error
           ^^^^^^^^^^^^^^^^^^^^^^

References:
   declare_hook_tests.js:34:5
   34|     badName([], (42: any)); // error
           ^^^^^^^ [1]


Error --------------------------------------------------------------------------------------- declare_hook_tests.js:37:9

Cannot call hook [1] because React hooks cannot be called in conditional contexts. [react-rule-hook]

   declare_hook_tests.js:37:9
   37|         useBadHook([], (42: any)); // error
               ^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   declare_hook_tests.js:37:9
   37|         useBadHook([], (42: any)); // error
               ^^^^^^^^^^ [1]


Error --------------------------------------------------------------------------------------- declare_hook_tests.js:47:5

Cannot call function because callee [1] may be a React hook [2] or may be a regular function definition [3]. Function
callees must either be definitely a hook or definitely not a hook, because the same hook must be called every time a
component renders. [react-rule-hook]

   declare_hook_tests.js:47:5
   47|     f([], (42: any)) // error
           ^^^^^^^^^^^^^^^^

References:
   declare_hook_tests.js:47:5
   47|     f([], (42: any)) // error
           ^ [1]
   declare_hook_tests.js:20:24
   20| declare hook useBadHook(x: Array<number>, y: React.RefObject<number>): void;
                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]
   declare_hook_tests.js:44:9
   44|         function badhook(x: Array<number>, y: React.RefObject<number>): void { }
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [3]


Error --------------------------------------------------------------------------------------- declare_hook_tests.js:50:5

Cannot call function because callee [1] has a name that indicates it is a React hook (starting with `use`) but it is
defined as a non-hook function. [react-rule-hook]

   declare_hook_tests.js:50:5
   50|     useBadName(); // error
           ^^^^^^^^^^^^

References:
   declare_hook_tests.js:50:5
   50|     useBadName(); // error
           ^^^^^^^^^^ [1]


Error --------------------------------------------------------------------------------------- declare_hook_tests.js:56:5

Cannot call hook because callee [1]'s name does not conform to React hook rules. Hook names must begin with `use`
followed by a capitalized letter. [react-rule-hook]

   declare_hook_tests.js:56:5
   56|     badName([], (42: any)); // error
           ^^^^^^^^^^^^^^^^^^^^^^

References:
   declare_hook_tests.js:56:5
   56|     badName([], (42: any)); // error
           ^^^^^^^ [1]


Error --------------------------------------------------------------------------------------- declare_hook_tests.js:59:9

Cannot call hook [1] because React hooks cannot be called in conditional contexts. [react-rule-hook]

   declare_hook_tests.js:59:9
   59|         useBadHook([], (42: any)); // error
               ^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   declare_hook_tests.js:59:9
   59|         useBadHook([], (42: any)); // error
               ^^^^^^^^^^ [1]


Error --------------------------------------------------------------------------------------- declare_hook_tests.js:69:5

Cannot call function because callee [1] may be a React hook [2] or may be a regular function definition [3]. Function
callees must either be definitely a hook or definitely not a hook, because the same hook must be called every time a
component renders. [react-rule-hook]

   declare_hook_tests.js:69:5
   69|     f([], (42: any)) // error
           ^^^^^^^^^^^^^^^^

References:
   declare_hook_tests.js:69:5
   69|     f([], (42: any)) // error
           ^ [1]
   declare_hook_tests.js:20:24
   20| declare hook useBadHook(x: Array<number>, y: React.RefObject<number>): void;
                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]
   declare_hook_tests.js:66:9
   66|         function badhook(x: Array<number>, y: React.RefObject<number>): void { }
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [3]


Error --------------------------------------------------------------------------------------- declare_hook_tests.js:72:5

Cannot call function because callee [1] has a name that indicates it is a React hook (starting with `use`) but it is
defined as a non-hook function. [react-rule-hook]

   declare_hook_tests.js:72:5
   72|     useBadName(); // error
           ^^^^^^^^^^^^

References:
   declare_hook_tests.js:72:5
   72|     useBadName(); // error
           ^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------------------- exp.js:5:1

Cannot cast `useFoo()` to empty because tuple type [1] is incompatible with empty [2]. [incompatible-cast]

   exp.js:5:1
   5| useFoo() as empty; // error
      ^^^^^^^^

References:
   exp.js:1:23
   1| export hook useFoo(): [number] {
                            ^^^^^^^^ [1]
   exp.js:5:13
   5| useFoo() as empty; // error
                  ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------------- exp.js:5:1

Cannot call hook [1] because React hooks can only be called within components or hooks. [react-rule-hook]

   exp.js:5:1
   5| useFoo() as empty; // error
      ^^^^^^^^

References:
   exp.js:5:1
   5| useFoo() as empty; // error
      ^^^^^^ [1]


Error ----------------------------------------------------------------------------------------------- hook_tests.js:3:13

Cannot call hook [1] because React hooks can only be called within components or hooks. [react-rule-hook]

   hook_tests.js:3:13
   3| const [v] = useCustom({a: 42});
                  ^^^^^^^^^^^^^^^^^^

References:
   hook_tests.js:3:13
   3| const [v] = useCustom({a: 42});
                  ^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------------ hook_tests.js:4:3

Cannot assign `100` to `v.a` because property `a` is not writable. The return value of a React hook [1] cannot be
written to. [react-rule-hook-mutation]

   hook_tests.js:4:3
   4| v.a = 100; // Error, x is not writable
        ^

References:
   hook_tests.js:1:1
   1| hook useCustom<T>(x: T): [T] { return [x]; }
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------------ hook_tests.js:6:1

Cannot cast `useCustom` to function type because function [1] is a React hook but function type [2] is not a hook. React
hooks and other functions are not compatible with each other, because hooks cannot be called conditionally.
[react-rule-hook-incompatible]

   hook_tests.js:6:1
   6| useCustom as <T>(T) => [T]; // error, hook and nonhook incompatible
      ^^^^^^^^^

References:
   hook_tests.js:1:1
   1| hook useCustom<T>(x: T): [T] { return [x]; }
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   hook_tests.js:6:14
   6| useCustom as <T>(T) => [T]; // error, hook and nonhook incompatible
                   ^^^^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- hook_tests.js:10:1

Cannot cast `nonhook` to `typeof useCustom` because function type [1] is not a React hook but function [2] is a hook.
React hooks and other functions are not compatible with each other, because hooks cannot be called conditionally.
[react-rule-hook-incompatible]

   hook_tests.js:10:1
   10| nonhook as typeof useCustom; // error, nonhook and hook incompatible
       ^^^^^^^

References:
   hook_tests.js:9:24
    9| declare const nonhook: <T>(T) => [T];
                              ^^^^^^^^^^^^^ [1]
   hook_tests.js:1:1
    1| hook useCustom<T>(x: T): [T] { return [x]; }
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- hook_tests.js:13:1

Cannot cast `useCustom` to `typeof useCustom2` because function [1] and function [2] are different React hooks.
Different React hooks are not compatible with each other, because hooks cannot be called conditionally.
[react-rule-hook-incompatible]

   hook_tests.js:13:1
   13| useCustom as typeof useCustom2; // error, hooks unique
       ^^^^^^^^^

References:
   hook_tests.js:1:1
    1| hook useCustom<T>(x: T): [T] { return [x]; }
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   hook_tests.js:12:1
   12| hook useCustom2<T>(x: T): [T] { return [x];}
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- hook_tests.js:19:9

Cannot assign `"hi"` to `foo.a` because property `a` is not writable. The return value of a React hook [1] cannot be
written to. [react-rule-hook-mutation]

   hook_tests.js:19:9
   19|     foo.a = "hi"; // error
               ^

References:
   hook_tests.js:23:1
   23| hook useCoolHook2(): [{a: string}, React.RefObject<number>] {
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------------------- hook_tests.js:32:5

Cannot assign `42` to `arr[0]` because read-only arrays cannot be written to. The return value of a React hook [1]
cannot be written to. [react-rule-hook-mutation]

   hook_tests.js:32:5
   32|     arr[0] = 42; // error
           ^^^^^^

References:
   hook_tests.js:17:1
   17| hook useCoolHook(): Array<number> {
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------------------- hook_tests.js:34:9

Cannot assign `"hi"` to `foo.a` because property `a` is not writable. The return value of a React hook [1] cannot be
written to. [react-rule-hook-mutation]

   hook_tests.js:34:9
   34|     foo.a = "hi"; // error
               ^

References:
   hook_tests.js:23:1
   23| hook useCoolHook2(): [{a: string}, React.RefObject<number>] {
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------------------- hook_tests.js:42:5

Cannot assign `42` to `x[0]` because read-only arrays cannot be written to. React hook arguments [1] and their nested
elements cannot be written to. [react-rule-unsafe-mutation]

   hook_tests.js:42:5
   42|     x[0] = 42; // error
           ^^^^

References:
   hook_tests.js:41:17
   41| hook useBadHook(x: Array<number>, y: React.RefObject<number>): void {
                       ^^^^^^^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------------------- hook_tests.js:47:5

Cannot read `current` from `w` [1] because `ref` values may not be read within hooks.
(https://react.dev/reference/react/useRef). [react-rule-unsafe-ref]

   47|     w.current = 42; // error
           ^ [1]


Error ----------------------------------------------------------------------------------------------- hook_tests.js:51:5

Cannot call hook [1] because React hooks can only be called within components or hooks. [react-rule-hook]

   hook_tests.js:51:5
   51|     useBadHook([], (42: any)); // error
           ^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   hook_tests.js:51:5
   51|     useBadHook([], (42: any)); // error
           ^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------------------- hook_tests.js:53:5

Cannot call hook [1] because React hooks can only be called within components or hooks. [react-rule-hook]

   hook_tests.js:53:5
   53|     badName([], (42: any)); // error
           ^^^^^^^^^^^^^^^^^^^^^^

References:
   hook_tests.js:53:5
   53|     badName([], (42: any)); // error
           ^^^^^^^ [1]


Error ----------------------------------------------------------------------------------------------- hook_tests.js:62:5

Cannot call hook because callee [1]'s name does not conform to React hook rules. Hook names must begin with `use`
followed by a capitalized letter. [react-rule-hook]

   hook_tests.js:62:5
   62|     badName([], (42: any)); // error
           ^^^^^^^^^^^^^^^^^^^^^^

References:
   hook_tests.js:62:5
   62|     badName([], (42: any)); // error
           ^^^^^^^ [1]


Error ----------------------------------------------------------------------------------------------- hook_tests.js:65:9

Cannot call hook [1] because React hooks cannot be called in conditional contexts. [react-rule-hook]

   hook_tests.js:65:9
   65|         useBadHook([], (42: any)); // error
               ^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   hook_tests.js:65:9
   65|         useBadHook([], (42: any)); // error
               ^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------------------- hook_tests.js:75:5

Cannot call function because callee [1] may be a React hook [2] or may be a regular function definition [3]. Function
callees must either be definitely a hook or definitely not a hook, because the same hook must be called every time a
component renders. [react-rule-hook]

   hook_tests.js:75:5
   75|     f([], (42: any)) // error
           ^^^^^^^^^^^^^^^^

References:
   hook_tests.js:75:5
   75|     f([], (42: any)) // error
           ^ [1]
   hook_tests.js:41:1
   41| hook useBadHook(x: Array<number>, y: React.RefObject<number>): void {
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]
   hook_tests.js:72:9
   72|         function badhook(x: Array<number>, y: React.RefObject<number>): void { }
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [3]


Error ----------------------------------------------------------------------------------------------- hook_tests.js:78:5

Cannot call function because callee [1] has a name that indicates it is a React hook (starting with `use`) but it is
defined as a non-hook function. [react-rule-hook]

   hook_tests.js:78:5
   78|     useBadName(); // error
           ^^^^^^^^^^^^

References:
   hook_tests.js:78:5
   78|     useBadName(); // error
           ^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------------------- hook_tests.js:84:5

Cannot call hook because callee [1]'s name does not conform to React hook rules. Hook names must begin with `use`
followed by a capitalized letter. [react-rule-hook]

   hook_tests.js:84:5
   84|     badName([], (42: any)); // error
           ^^^^^^^^^^^^^^^^^^^^^^

References:
   hook_tests.js:84:5
   84|     badName([], (42: any)); // error
           ^^^^^^^ [1]


Error ----------------------------------------------------------------------------------------------- hook_tests.js:87:9

Cannot call hook [1] because React hooks cannot be called in conditional contexts. [react-rule-hook]

   hook_tests.js:87:9
   87|         useBadHook([], (42: any)); // error
               ^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   hook_tests.js:87:9
   87|         useBadHook([], (42: any)); // error
               ^^^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------------------- hook_tests.js:97:5

Cannot call function because callee [1] may be a React hook [2] or may be a regular function definition [3]. Function
callees must either be definitely a hook or definitely not a hook, because the same hook must be called every time a
component renders. [react-rule-hook]

   hook_tests.js:97:5
   97|     f([], (42: any)) // error
           ^^^^^^^^^^^^^^^^

References:
   hook_tests.js:97:5
   97|     f([], (42: any)) // error
           ^ [1]
   hook_tests.js:41:1
   41| hook useBadHook(x: Array<number>, y: React.RefObject<number>): void {
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]
   hook_tests.js:94:9
   94|         function badhook(x: Array<number>, y: React.RefObject<number>): void { }
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [3]


Error ---------------------------------------------------------------------------------------------- hook_tests.js:100:5

Cannot call function because callee [1] has a name that indicates it is a React hook (starting with `use`) but it is
defined as a non-hook function. [react-rule-hook]

   hook_tests.js:100:5
   100|     useBadName(); // error
            ^^^^^^^^^^^^

References:
   hook_tests.js:100:5
   100|     useBadName(); // error
            ^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------ hook_type_tests.js:3:13

Cannot call hook [1] because React hooks can only be called within components or hooks. [react-rule-hook]

   hook_type_tests.js:3:13
   3| const [v] = useCustom({a: 42}); // error, not in component or hook
                  ^^^^^^^^^^^^^^^^^^

References:
   hook_type_tests.js:3:13
   3| const [v] = useCustom({a: 42}); // error, not in component or hook
                  ^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- hook_type_tests.js:4:3

Cannot assign `100` to `v.a` because property `a` is not writable. The return value of a React hook [1] cannot be
written to. [react-rule-hook-mutation]

   hook_type_tests.js:4:3
   4| v.a = 100; // Error, x is not writable
        ^

References:
   hook_type_tests.js:1:26
   1| declare const useCustom: hook <T>(x: T) => [T]
                               ^^^^^^^^^^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------- hook_type_tests.js:6:1

Cannot cast `useCustom` to function type because function type [1] is a React hook type annotation but function type [2]
is not a hook. React hooks and other functions are not compatible with each other, because hooks cannot be called
conditionally. [react-rule-hook-incompatible]

   hook_type_tests.js:6:1
   6| useCustom as <T>(T) => [T]; // error, hook and nonhook incompatible
      ^^^^^^^^^

References:
   hook_type_tests.js:1:26
   1| declare const useCustom: hook <T>(x: T) => [T]
                               ^^^^^^^^^^^^^^^^^^^^^ [1]
   hook_type_tests.js:6:14
   6| useCustom as <T>(T) => [T]; // error, hook and nonhook incompatible
                   ^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------ hook_type_tests.js:10:1

Cannot cast `nonhook` to `typeof useCustom` because function type [1] is not a React hook but function type [2] is a
hook type annotation. React hooks and other functions are not compatible with each other, because hooks cannot be called
conditionally. [react-rule-hook-incompatible]

   hook_type_tests.js:10:1
   10| nonhook as typeof useCustom; // error, nonhook and hook incompatible
       ^^^^^^^

References:
   hook_type_tests.js:9:24
    9| declare const nonhook: <T>(T) => [T];
                              ^^^^^^^^^^^^^ [1]
   hook_type_tests.js:1:26
    1| declare const useCustom: hook <T>(x: T) => [T]
                                ^^^^^^^^^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------ hook_type_tests.js:23:5

Cannot call hook [1] because React hooks can only be called within components or hooks. [react-rule-hook]

   hook_type_tests.js:23:5
   23|     useBadHook([], (42: any)); // error
           ^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   hook_type_tests.js:23:5
   23|     useBadHook([], (42: any)); // error
           ^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------ hook_type_tests.js:25:5

Cannot call hook [1] because React hooks can only be called within components or hooks. [react-rule-hook]

   hook_type_tests.js:25:5
   25|     badName([], (42: any)); // error
           ^^^^^^^^^^^^^^^^^^^^^^

References:
   hook_type_tests.js:25:5
   25|     badName([], (42: any)); // error
           ^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------ hook_type_tests.js:34:5

Cannot call hook because callee [1]'s name does not conform to React hook rules. Hook names must begin with `use`
followed by a capitalized letter. [react-rule-hook]

   hook_type_tests.js:34:5
   34|     badName([], (42: any)); // error
           ^^^^^^^^^^^^^^^^^^^^^^

References:
   hook_type_tests.js:34:5
   34|     badName([], (42: any)); // error
           ^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------ hook_type_tests.js:37:9

Cannot call hook [1] because React hooks cannot be called in conditional contexts. [react-rule-hook]

   hook_type_tests.js:37:9
   37|         useBadHook([], (42: any)); // error
               ^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   hook_type_tests.js:37:9
   37|         useBadHook([], (42: any)); // error
               ^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------ hook_type_tests.js:47:5

Cannot call function because callee [1] may be a React hook [2] or may be a regular function definition [3]. Function
callees must either be definitely a hook or definitely not a hook, because the same hook must be called every time a
component renders. [react-rule-hook]

   hook_type_tests.js:47:5
   47|     f([], (42: any)) // error
           ^^^^^^^^^^^^^^^^

References:
   hook_type_tests.js:47:5
   47|     f([], (42: any)) // error
           ^ [1]
   hook_type_tests.js:20:27
   20| declare const useBadHook: hook (x: Array<number>, y: React.RefObject<number>) => void;
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]
   hook_type_tests.js:44:9
   44|         function badhook(x: Array<number>, y: React.RefObject<number>): void { }
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [3]


Error ------------------------------------------------------------------------------------------ hook_type_tests.js:50:5

Cannot call function because callee [1] has a name that indicates it is a React hook (starting with `use`) but it is
defined as a non-hook function. [react-rule-hook]

   hook_type_tests.js:50:5
   50|     useBadName(); // error
           ^^^^^^^^^^^^

References:
   hook_type_tests.js:50:5
   50|     useBadName(); // error
           ^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------ hook_type_tests.js:56:5

Cannot call hook because callee [1]'s name does not conform to React hook rules. Hook names must begin with `use`
followed by a capitalized letter. [react-rule-hook]

   hook_type_tests.js:56:5
   56|     badName([], (42: any)); // error
           ^^^^^^^^^^^^^^^^^^^^^^

References:
   hook_type_tests.js:56:5
   56|     badName([], (42: any)); // error
           ^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------ hook_type_tests.js:59:9

Cannot call hook [1] because React hooks cannot be called in conditional contexts. [react-rule-hook]

   hook_type_tests.js:59:9
   59|         useBadHook([], (42: any)); // error
               ^^^^^^^^^^^^^^^^^^^^^^^^^

References:
   hook_type_tests.js:59:9
   59|         useBadHook([], (42: any)); // error
               ^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------ hook_type_tests.js:69:5

Cannot call function because callee [1] may be a React hook [2] or may be a regular function definition [3]. Function
callees must either be definitely a hook or definitely not a hook, because the same hook must be called every time a
component renders. [react-rule-hook]

   hook_type_tests.js:69:5
   69|     f([], (42: any)) // error
           ^^^^^^^^^^^^^^^^

References:
   hook_type_tests.js:69:5
   69|     f([], (42: any)) // error
           ^ [1]
   hook_type_tests.js:20:27
   20| declare const useBadHook: hook (x: Array<number>, y: React.RefObject<number>) => void;
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]
   hook_type_tests.js:66:9
   66|         function badhook(x: Array<number>, y: React.RefObject<number>): void { }
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [3]


Error ------------------------------------------------------------------------------------------ hook_type_tests.js:72:5

Cannot call function because callee [1] has a name that indicates it is a React hook (starting with `use`) but it is
defined as a non-hook function. [react-rule-hook]

   hook_type_tests.js:72:5
   72|     useBadName(); // error
           ^^^^^^^^^^^^

References:
   hook_type_tests.js:72:5
   72|     useBadName(); // error
           ^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------------------- imp.js:3:1

Cannot cast `useFoo()` to empty because tuple type [1] is incompatible with empty [2]. [incompatible-cast]

   imp.js:3:1
   3| useFoo() as empty; // error
      ^^^^^^^^

References:
   exp.js:1:23
   1| export hook useFoo(): [number] {
                            ^^^^^^^^ [1]
   imp.js:3:13
   3| useFoo() as empty; // error
                  ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------------- imp.js:3:1

Cannot call hook [1] because React hooks can only be called within components or hooks. [react-rule-hook]

   imp.js:3:1
   3| useFoo() as empty; // error
      ^^^^^^^^

References:
   imp.js:3:1
   3| useFoo() as empty; // error
      ^^^^^^ [1]


Error ------------------------------------------------------------------------------------------------------- imp.js:7:5

Cannot assign `1` to `x[0]` because read-only arrays cannot be written to. The return value of a React hook [1] cannot
be written to. [react-rule-hook-mutation]

   imp.js:7:5
   7|     x[0] = 1; // error
          ^^^^

References:
   exp.js:1:8
   1| export hook useFoo(): [number] {
             ^^^^^^^^^^^^^^^^^^^^^^^ [1]



Found 53 errors
