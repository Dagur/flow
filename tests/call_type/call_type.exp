Error --------------------------------------------------------------------------------------------- intersection.js:8:32

Cannot return `x` because `B` [1] is incompatible with `A` [2]. [incompatible-return]

   intersection.js:8:32
   8| function foo(x: X): A { return x; } // error
                                     ^

References:
   intersection.js:8:17
   8| function foo(x: X): A { return x; } // error
                      ^ [1]
   intersection.js:8:21
   8| function foo(x: X): A { return x; } // error
                          ^ [2]


Error --------------------------------------------------------------------------------------------- intersection.js:9:32

Cannot return `x` because `A` [1] is incompatible with `B` [2]. [incompatible-return]

   intersection.js:9:32
   9| function bar(x: X): B { return x; } // error
                                     ^

References:
   intersection.js:9:17
   9| function bar(x: X): B { return x; } // error
                      ^ [1]
   intersection.js:9:21
   9| function bar(x: X): B { return x; } // error
                          ^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:5:10

Cannot use type without at least 1 type argument. [missing-type-arg]

   5| type A = $Call; // Error: one or more arguments are required.
               ^^^^^


Error ----------------------------------------------------------------------------------------------------- test.js:6:10

Cannot use type without at least 1 type argument. [missing-type-arg]

   6| type B = $Call<>; // Error: one or more arguments are required.
               ^^^^^^^


Error ----------------------------------------------------------------------------------------------------- test.js:11:9

Cannot cast `null` to `C` because mixed [1] is incompatible with number [2]. [incompatible-cast]

   test.js:11:9
   11| ((null: mixed): C); // Error: mixed ~> number
               ^^^^^ [1]

References:
   test.js:11:17
   11| ((null: mixed): C); // Error: mixed ~> number
                       ^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:13:2

Cannot cast `c` to empty because number [1] is incompatible with empty [2]. [incompatible-cast]

   test.js:13:2
   13| (c: empty); // Error: number ~> empty
        ^

References:
   test.js:9:16
    9| declare var c: C;
                      ^ [1]
   test.js:13:5
   13| (c: empty); // Error: number ~> empty
           ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:17:2

Cannot cast `42` to `D` because number [1] is incompatible with undefined [2]. [incompatible-cast]

   test.js:17:2
   17| (42: D); // Error: number ~> undefined
        ^^ [1]

References:
   test.js:17:6
   17| (42: D); // Error: number ~> undefined
            ^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:22:9

Cannot cast `null` to `E` because mixed [1] is incompatible with number [2]. [incompatible-cast]

   test.js:22:9
   22| ((null: mixed): E); // Error: mixed ~> number
               ^^^^^ [1]

References:
   test.js:22:17
   22| ((null: mixed): E); // Error: mixed ~> number
                       ^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:24:2

Cannot cast `e` to empty because number [1] is incompatible with empty [2]. [incompatible-cast]

   test.js:24:2
   24| (e: empty); // Error: number ~> empty
        ^

References:
   test.js:20:16
   20| declare var e: E;
                      ^ [1]
   test.js:24:5
   24| (e: empty); // Error: number ~> empty
           ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:29:9

Cannot cast `null` to `F` because mixed [1] is incompatible with number [2]. [incompatible-cast]

   test.js:29:9
   29| ((null: mixed): F); // Error: mixed ~> number
               ^^^^^ [1]

References:
   test.js:29:17
   29| ((null: mixed): F); // Error: mixed ~> number
                       ^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:31:2

Cannot cast `f` to empty because number [1] is incompatible with empty [2]. [incompatible-cast]

   test.js:31:2
   31| (f: empty); // Error: number ~> empty
        ^

References:
   test.js:27:16
   27| declare var f: F;
                      ^ [1]
   test.js:31:5
   31| (f: empty); // Error: number ~> empty
           ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:36:9

Cannot cast `null` to `G` because: [incompatible-cast]
 - Either mixed [1] is incompatible with number [2].
 - Or mixed [1] is incompatible with string [3].

   test.js:36:9
   36| ((null: mixed): G); // Error: mixed ~> number | string
               ^^^^^ [1]

References:
   test.js:33:21
   33| type G = $Call<Fn2, number, string>;
                           ^^^^^^ [2]
   test.js:33:29
   33| type G = $Call<Fn2, number, string>;
                                   ^^^^^^ [3]


Error ----------------------------------------------------------------------------------------------------- test.js:37:2

Cannot cast `g` to number because string [1] is incompatible with number [2]. [incompatible-cast]

   test.js:37:2
   37| (g: number); // Error: number | string ~> number
        ^

References:
   test.js:34:16
   34| declare var g: G;
                      ^ [1]
   test.js:37:5
   37| (g: number); // Error: number | string ~> number
           ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:39:2

Cannot cast `g` to empty because number [1] is incompatible with empty [2]. [incompatible-cast]

   test.js:39:2
   39| (g: empty); // Error: number | string ~> empty
        ^

References:
   test.js:34:16
   34| declare var g: G;
                      ^ [1]
   test.js:39:5
   39| (g: empty); // Error: number | string ~> empty
           ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- test.js:39:2

Cannot cast `g` to empty because string [1] is incompatible with empty [2]. [incompatible-cast]

   test.js:39:2
   39| (g: empty); // Error: number | string ~> empty
        ^

References:
   test.js:34:16
   34| declare var g: G;
                      ^ [1]
   test.js:39:5
   39| (g: empty); // Error: number | string ~> empty
           ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- union.js:4:9

Cannot cast `null` to `A` because: [incompatible-cast]
 - Either mixed [1] is incompatible with number [2].
 - Or mixed [1] is incompatible with string [3].

   union.js:4:9
   4| ((null: mixed): A); // Error: mixed ~> number | string
              ^^^^^ [1]

References:
   union.js:1:23
   1| type A = $Call<(() => number) | (() => string)>;
                            ^^^^^^ [2]
   union.js:1:40
   1| type A = $Call<(() => number) | (() => string)>;
                                             ^^^^^^ [3]


Error ----------------------------------------------------------------------------------------------------- union.js:5:2

Cannot cast `a` to number because string [1] is incompatible with number [2]. [incompatible-cast]

   union.js:5:2
   5| (a: number); // Error: number | string ~> number
       ^

References:
   union.js:2:16
   2| declare var a: A;
                     ^ [1]
   union.js:5:5
   5| (a: number); // Error: number | string ~> number
          ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- union.js:7:2

Cannot cast `a` to empty because number [1] is incompatible with empty [2]. [incompatible-cast]

   union.js:7:2
   7| (a: empty); // Error: number | string ~> empty
       ^

References:
   union.js:2:16
   2| declare var a: A;
                     ^ [1]
   union.js:7:5
   7| (a: empty); // Error: number | string ~> empty
          ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- union.js:7:2

Cannot cast `a` to empty because string [1] is incompatible with empty [2]. [incompatible-cast]

   union.js:7:2
   7| (a: empty); // Error: number | string ~> empty
       ^

References:
   union.js:2:16
   2| declare var a: A;
                     ^ [1]
   union.js:7:5
   7| (a: empty); // Error: number | string ~> empty
          ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- union.js:12:9

Cannot cast `null` to `B` because: [incompatible-cast]
 - Either mixed [1] is incompatible with number [2].
 - Or mixed [1] is incompatible with string [3].

   union.js:12:9
   12| ((null: mixed): B); // Error: mixed ~> number | string
               ^^^^^ [1]

References:
   union.js:9:52
    9| type B = $Call<(<T>(T) => T) | (<T>(any, T) => T), number, string>;
                                                          ^^^^^^ [2]
   union.js:9:60
    9| type B = $Call<(<T>(T) => T) | (<T>(any, T) => T), number, string>;
                                                                  ^^^^^^ [3]


Error ---------------------------------------------------------------------------------------------------- union.js:13:2

Cannot cast `b` to number because string [1] is incompatible with number [2]. [incompatible-cast]

   union.js:13:2
   13| (b: number); // Error: number | string ~> number
        ^

References:
   union.js:10:16
   10| declare var b: B;
                      ^ [1]
   union.js:13:5
   13| (b: number); // Error: number | string ~> number
           ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- union.js:15:2

Cannot cast `b` to empty because number [1] is incompatible with empty [2]. [incompatible-cast]

   union.js:15:2
   15| (b: empty); // Error: number | string ~> empty
        ^

References:
   union.js:10:16
   10| declare var b: B;
                      ^ [1]
   union.js:15:5
   15| (b: empty); // Error: number | string ~> empty
           ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- union.js:15:2

Cannot cast `b` to empty because string [1] is incompatible with empty [2]. [incompatible-cast]

   union.js:15:2
   15| (b: empty); // Error: number | string ~> empty
        ^

References:
   union.js:10:16
   10| declare var b: B;
                      ^ [1]
   union.js:15:5
   15| (b: empty); // Error: number | string ~> empty
           ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- union.js:20:9

Cannot cast `null` to `C` because: [incompatible-cast]
 - Either mixed [1] is incompatible with number [2].
 - Or mixed [1] is incompatible with string [3].

   union.js:20:9
   20| ((null: mixed): C); // Error: mixed ~> number | string
               ^^^^^ [1]

References:
   union.js:17:29
   17| type C = $Call<<T>(T) => T, number | string>;
                                   ^^^^^^ [2]
   union.js:17:38
   17| type C = $Call<<T>(T) => T, number | string>;
                                            ^^^^^^ [3]


Error ---------------------------------------------------------------------------------------------------- union.js:21:2

Cannot cast `c` to number because string [1] is incompatible with number [2]. [incompatible-cast]

   union.js:21:2
   21| (c: number); // Error: number | string ~> number
        ^

References:
   union.js:18:16
   18| declare var c: C;
                      ^ [1]
   union.js:21:5
   21| (c: number); // Error: number | string ~> number
           ^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- union.js:23:2

Cannot cast `c` to empty because number [1] is incompatible with empty [2]. [incompatible-cast]

   union.js:23:2
   23| (c: empty); // Error: number | string ~> empty
        ^

References:
   union.js:18:16
   18| declare var c: C;
                      ^ [1]
   union.js:23:5
   23| (c: empty); // Error: number | string ~> empty
           ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- union.js:23:2

Cannot cast `c` to empty because string [1] is incompatible with empty [2]. [incompatible-cast]

   union.js:23:2
   23| (c: empty); // Error: number | string ~> empty
        ^

References:
   union.js:18:16
   18| declare var c: C;
                      ^ [1]
   union.js:23:5
   23| (c: empty); // Error: number | string ~> empty
           ^^^^^ [2]



Found 27 errors
