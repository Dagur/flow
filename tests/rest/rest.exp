Error ------------------------------------------------------------------------------------------------------ type.js:8:2

Cannot cast `o1` to object type because property `x` is missing in object type [1] but exists in object type [2].
[prop-missing]

   type.js:8:2
   8| (o1: {||}); // Error: missing x
       ^^

References:
   type.js:8:6
   8| (o1: {||}); // Error: missing x
           ^^^^ [1]
   type.js:7:17
   7| declare var o1: O1;
                      ^^ [2]


Error ----------------------------------------------------------------------------------------------------- type.js:10:2

Cannot cast `o1` to object type because undefined [1] is incompatible with `X` [2] in property `x`. This property is
invariantly typed. See https://flow.org/en/docs/faq/#why-cant-i-pass-a-string-to-a-function-that-takes-a-string-number.
[incompatible-cast]

   type.js:10:2
   10| (o1: {|x?: X|}); // Error: x is not optional
        ^^

References:
   type.js:10:12
   10| (o1: {|x?: X|}); // Error: x is not optional
                  ^ [1]
   type.js:6:22
    6| type O1 = $Rest<{|x: X, y: Y|}, {|y: Y|}>;
                            ^ [2]


Error ----------------------------------------------------------------------------------------------------- type.js:11:2

Cannot cast `o1` to object type because property `y` is missing in object type [1] but exists in object type [2].
[prop-missing]

   type.js:11:2
   11| (o1: {|x: X, y?: Y|}); // Error: y is not in O1
        ^^

References:
   type.js:7:17
    7| declare var o1: O1;
                       ^^ [1]
   type.js:11:6
   11| (o1: {|x: X, y?: Y|}); // Error: y is not in O1
            ^^^^^^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- type.js:12:2

Cannot cast `o1` to object type because property `y` is missing in object type [1] but exists in object type [2].
[prop-missing]

   type.js:12:2
   12| (o1: {|x?: X, y?: Y|}); // Error: x is not optional and y is not in O1
        ^^

References:
   type.js:7:17
    7| declare var o1: O1;
                       ^^ [1]
   type.js:12:6
   12| (o1: {|x?: X, y?: Y|}); // Error: x is not optional and y is not in O1
            ^^^^^^^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- type.js:12:2

Cannot cast `o1` to object type because undefined [1] is incompatible with `X` [2] in property `x`. This property is
invariantly typed. See https://flow.org/en/docs/faq/#why-cant-i-pass-a-string-to-a-function-that-takes-a-string-number.
[incompatible-cast]

   type.js:12:2
   12| (o1: {|x?: X, y?: Y|}); // Error: x is not optional and y is not in O1
        ^^

References:
   type.js:12:12
   12| (o1: {|x?: X, y?: Y|}); // Error: x is not optional and y is not in O1
                  ^ [1]
   type.js:6:22
    6| type O1 = $Rest<{|x: X, y: Y|}, {|y: Y|}>;
                            ^ [2]


Error ----------------------------------------------------------------------------------------------------- type.js:13:2

Cannot cast `o1` to object type because `X` [1] is incompatible with `Y` [2] in property `x`. [incompatible-cast]

   type.js:13:2
   13| (o1: {|x: Y|}); // Error: X = Y
        ^^

References:
   type.js:6:22
    6| type O1 = $Rest<{|x: X, y: Y|}, {|y: Y|}>;
                            ^ [1]
   type.js:13:11
   13| (o1: {|x: Y|}); // Error: X = Y
                 ^ [2]


Error ----------------------------------------------------------------------------------------------------- type.js:14:2

Cannot cast object literal to `O1` because property `x` is missing in object literal [1] but exists in object type [2].
[prop-missing]

   type.js:14:2
   14| ({y}: O1); // Error: missing x
        ^^^ [1]

References:
   type.js:14:7
   14| ({y}: O1); // Error: missing x
             ^^ [2]


Error ----------------------------------------------------------------------------------------------------- type.js:14:2

Cannot cast object literal to `O1` because property `y` is missing in object type [1] but exists in object literal [2].
[prop-missing]

   type.js:14:2
   14| ({y}: O1); // Error: missing x
        ^^^ [2]

References:
   type.js:14:7
   14| ({y}: O1); // Error: missing x
             ^^ [1]


Error ----------------------------------------------------------------------------------------------------- type.js:16:2

Cannot cast object literal to `O1` because property `y` is missing in object type [1] but exists in object literal [2].
[prop-missing]

   type.js:16:2
   16| ({x, y}: O1); // Error: y is not in O1
        ^^^^^^ [2]

References:
   type.js:16:10
   16| ({x, y}: O1); // Error: y is not in O1
                ^^ [1]


Error ----------------------------------------------------------------------------------------------------- type.js:17:6

Cannot cast object literal to `O1` because `Y` [1] is incompatible with `X` [2] in property `x`. [incompatible-cast]

   type.js:17:6
   17| ({x: y}: O1); // Error: Y ~> X
            ^

References:
   type.js:4:16
    4| declare var y: Y;
                      ^ [1]
   type.js:6:22
    6| type O1 = $Rest<{|x: X, y: Y|}, {|y: Y|}>;
                            ^ [2]


Error ---------------------------------------------------------------------------------------------------- type.js:19:28

Cannot instantiate `$Rest` because `Y` [1] is incompatible with `X` [2]. [incompatible-type]

   type.js:19:28
   19| type O2 = $Rest<{|x: X, y: Y|}, {|y: X|}>;
                                  ^ [1]

References:
   type.js:19:38
   19| type O2 = $Rest<{|x: X, y: Y|}, {|y: X|}>;
                                            ^ [2]


Error ----------------------------------------------------------------------------------------------------- type.js:25:2

Cannot cast `o3` to object type because property `x` is missing in object type [1] but exists in object type [2].
[prop-missing]

   type.js:25:2
   25| (o3: {||}); // Error: missing x and y
        ^^

References:
   type.js:25:6
   25| (o3: {||}); // Error: missing x and y
            ^^^^ [1]
   type.js:24:17
   24| declare var o3: O3;
                       ^^ [2]


Error ----------------------------------------------------------------------------------------------------- type.js:25:2

Cannot cast `o3` to object type because property `y` is missing in object type [1] but exists in object type [2].
[prop-missing]

   type.js:25:2
   25| (o3: {||}); // Error: missing x and y
        ^^

References:
   type.js:25:6
   25| (o3: {||}); // Error: missing x and y
            ^^^^ [1]
   type.js:24:17
   24| declare var o3: O3;
                       ^^ [2]


Error ----------------------------------------------------------------------------------------------------- type.js:26:2

Cannot cast `o3` to object type because property `y` is missing in object type [1] but exists in object type [2].
[prop-missing]

   type.js:26:2
   26| (o3: {|x: X|}); // Error: x is optional and missing y
        ^^

References:
   type.js:26:6
   26| (o3: {|x: X|}); // Error: x is optional and missing y
            ^^^^^^^^ [1]
   type.js:24:17
   24| declare var o3: O3;
                       ^^ [2]


Error ----------------------------------------------------------------------------------------------------- type.js:26:2

Cannot cast `o3` to object type because undefined [1] is incompatible with `X` [2] in property `x`. [incompatible-cast]

   type.js:26:2
   26| (o3: {|x: X|}); // Error: x is optional and missing y
        ^^

References:
   type.js:23:22
   23| type O3 = $Rest<{|x: X, y: Y|}, {y: Y}>;
                            ^ [1]
   type.js:26:11
   26| (o3: {|x: X|}); // Error: x is optional and missing y
                 ^ [2]


Error ----------------------------------------------------------------------------------------------------- type.js:27:2

Cannot cast `o3` to object type because property `y` is missing in object type [1] but exists in object type [2].
[prop-missing]

   type.js:27:2
   27| (o3: {|x?: X|}); // Error: missing y
        ^^

References:
   type.js:27:6
   27| (o3: {|x?: X|}); // Error: missing y
            ^^^^^^^^^ [1]
   type.js:24:17
   24| declare var o3: O3;
                       ^^ [2]


Error ----------------------------------------------------------------------------------------------------- type.js:28:2

Cannot cast `o3` to object type because undefined [1] is incompatible with `X` [2] in property `x`. [incompatible-cast]

   type.js:28:2
   28| (o3: {|x: X, y?: Y|}); // Error: x is optional
        ^^

References:
   type.js:23:22
   23| type O3 = $Rest<{|x: X, y: Y|}, {y: Y}>;
                            ^ [1]
   type.js:28:11
   28| (o3: {|x: X, y?: Y|}); // Error: x is optional
                 ^ [2]


Error ----------------------------------------------------------------------------------------------------- type.js:30:2

Cannot cast `o3` to object type because property `y` is missing in object type [1] but exists in object type [2].
[prop-missing]

   type.js:30:2
   30| (o3: {|x: Y|}); // Error: X = Y, x is optional, and missing y
        ^^

References:
   type.js:30:6
   30| (o3: {|x: Y|}); // Error: X = Y, x is optional, and missing y
            ^^^^^^^^ [1]
   type.js:24:17
   24| declare var o3: O3;
                       ^^ [2]


Error ----------------------------------------------------------------------------------------------------- type.js:30:2

Cannot cast `o3` to object type because `X` [1] is incompatible with `Y` [2] in property `x`. [incompatible-cast]

   type.js:30:2
   30| (o3: {|x: Y|}); // Error: X = Y, x is optional, and missing y
        ^^

References:
   type.js:23:22
   23| type O3 = $Rest<{|x: X, y: Y|}, {y: Y}>;
                            ^ [1]
   type.js:30:11
   30| (o3: {|x: Y|}); // Error: X = Y, x is optional, and missing y
                 ^ [2]


Error ----------------------------------------------------------------------------------------------------- type.js:30:2

Cannot cast `o3` to object type because undefined [1] is incompatible with `Y` [2] in property `x`. [incompatible-cast]

   type.js:30:2
   30| (o3: {|x: Y|}); // Error: X = Y, x is optional, and missing y
        ^^

References:
   type.js:23:22
   23| type O3 = $Rest<{|x: X, y: Y|}, {y: Y}>;
                            ^ [1]
   type.js:30:11
   30| (o3: {|x: Y|}); // Error: X = Y, x is optional, and missing y
                 ^ [2]


Error ----------------------------------------------------------------------------------------------------- type.js:34:6

Cannot cast object literal to `O3` because `Y` [1] is incompatible with `X` [2] in property `x`. [incompatible-cast]

   type.js:34:6
   34| ({x: y}: O3); // Error: Y ~> X
            ^

References:
   type.js:4:16
    4| declare var y: Y;
                      ^ [1]
   type.js:23:22
   23| type O3 = $Rest<{|x: X, y: Y|}, {y: Y}>;
                            ^ [2]


Error ----------------------------------------------------------------------------------------------------- type.js:38:2

Cannot cast `o4` to object type because property `x` is missing in object type [1] but exists in object type [2].
[prop-missing]

   type.js:38:2
   38| (o4: {||}); // Error: missing x and y
        ^^

References:
   type.js:38:6
   38| (o4: {||}); // Error: missing x and y
            ^^^^ [1]
   type.js:37:17
   37| declare var o4: O4;
                       ^^ [2]


Error ----------------------------------------------------------------------------------------------------- type.js:38:2

Cannot cast `o4` to object type because property `y` is missing in object type [1] but exists in object type [2].
[prop-missing]

   type.js:38:2
   38| (o4: {||}); // Error: missing x and y
        ^^

References:
   type.js:38:6
   38| (o4: {||}); // Error: missing x and y
            ^^^^ [1]
   type.js:37:17
   37| declare var o4: O4;
                       ^^ [2]


Error ----------------------------------------------------------------------------------------------------- type.js:39:2

Cannot cast `o4` to object type because property `y` is missing in object type [1] but exists in object type [2].
[prop-missing]

   type.js:39:2
   39| (o4: {|x: X|}); // Error: missing y
        ^^

References:
   type.js:39:6
   39| (o4: {|x: X|}); // Error: missing y
            ^^^^^^^^ [1]
   type.js:37:17
   37| declare var o4: O4;
                       ^^ [2]


Error ----------------------------------------------------------------------------------------------------- type.js:40:2

Cannot cast `o4` to object type because property `y` is missing in object type [1] but exists in object type [2].
[prop-missing]

   type.js:40:2
   40| (o4: {|x?: X|}); // Error: x is not optional and missing y
        ^^

References:
   type.js:40:6
   40| (o4: {|x?: X|}); // Error: x is not optional and missing y
            ^^^^^^^^^ [1]
   type.js:37:17
   37| declare var o4: O4;
                       ^^ [2]


Error ----------------------------------------------------------------------------------------------------- type.js:40:2

Cannot cast `o4` to object type because undefined [1] is incompatible with `X` [2] in property `x`. This property is
invariantly typed. See https://flow.org/en/docs/faq/#why-cant-i-pass-a-string-to-a-function-that-takes-a-string-number.
[incompatible-cast]

   type.js:40:2
   40| (o4: {|x?: X|}); // Error: x is not optional and missing y
        ^^

References:
   type.js:40:12
   40| (o4: {|x?: X|}); // Error: x is not optional and missing y
                  ^ [1]
   type.js:36:22
   36| type O4 = $Rest<{|x: X, y: Y|}, {|y?: Y|}>;
                            ^ [2]


Error ----------------------------------------------------------------------------------------------------- type.js:42:2

Cannot cast `o4` to object type because undefined [1] is incompatible with `X` [2] in property `x`. This property is
invariantly typed. See https://flow.org/en/docs/faq/#why-cant-i-pass-a-string-to-a-function-that-takes-a-string-number.
[incompatible-cast]

   type.js:42:2
   42| (o4: {|x?: X, y?: Y|}); // Error: x is not optional
        ^^

References:
   type.js:42:12
   42| (o4: {|x?: X, y?: Y|}); // Error: x is not optional
                  ^ [1]
   type.js:36:22
   36| type O4 = $Rest<{|x: X, y: Y|}, {|y?: Y|}>;
                            ^ [2]


Error ----------------------------------------------------------------------------------------------------- type.js:43:2

Cannot cast `o4` to object type because property `y` is missing in object type [1] but exists in object type [2].
[prop-missing]

   type.js:43:2
   43| (o4: {|x: Y|}); // Error: X = Y, and missing y
        ^^

References:
   type.js:43:6
   43| (o4: {|x: Y|}); // Error: X = Y, and missing y
            ^^^^^^^^ [1]
   type.js:37:17
   37| declare var o4: O4;
                       ^^ [2]


Error ----------------------------------------------------------------------------------------------------- type.js:43:2

Cannot cast `o4` to object type because `X` [1] is incompatible with `Y` [2] in property `x`. [incompatible-cast]

   type.js:43:2
   43| (o4: {|x: Y|}); // Error: X = Y, and missing y
        ^^

References:
   type.js:36:22
   36| type O4 = $Rest<{|x: X, y: Y|}, {|y?: Y|}>;
                            ^ [1]
   type.js:43:11
   43| (o4: {|x: Y|}); // Error: X = Y, and missing y
                 ^ [2]


Error ----------------------------------------------------------------------------------------------------- type.js:44:2

Cannot cast object literal to `O4` because property `x` is missing in object literal [1] but exists in object type [2].
[prop-missing]

   type.js:44:2
   44| ({y}: O4); // Error: missing x
        ^^^ [1]

References:
   type.js:44:7
   44| ({y}: O4); // Error: missing x
             ^^ [2]


Error ----------------------------------------------------------------------------------------------------- type.js:47:6

Cannot cast object literal to `O4` because `Y` [1] is incompatible with `X` [2] in property `x`. [incompatible-cast]

   type.js:47:6
   47| ({x: y}: O4); // Error: Y ~> X
            ^

References:
   type.js:4:16
    4| declare var y: Y;
                      ^ [1]
   type.js:36:22
   36| type O4 = $Rest<{|x: X, y: Y|}, {|y?: Y|}>;
                            ^ [2]


Error ----------------------------------------------------------------------------------------------------- type.js:51:2

Cannot cast `o5` to object type because inexact object type [1] is incompatible with exact object type [2].
[incompatible-exact]

   type.js:51:2
   51| (o5: {|x?: X|}); // Error: inexact ~> exact
        ^^

References:
   type.js:50:17
   50| declare var o5: O5;
                       ^^ [1]
   type.js:51:6
   51| (o5: {|x?: X|}); // Error: inexact ~> exact
            ^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- type.js:53:2

Cannot cast `o5` to object type because undefined [1] is incompatible with `X` [2] in property `x`. [incompatible-cast]

   type.js:53:2
   53| (o5: {x: X}); // Error: x is optional
        ^^

References:
   type.js:49:21
   49| type O5 = $Rest<{x: X, y: Y}, {|y: Y|}>;
                           ^ [1]
   type.js:53:10
   53| (o5: {x: X}); // Error: x is optional
                ^ [2]


Error ----------------------------------------------------------------------------------------------------- type.js:55:2

Cannot cast `o5` to object type because property `y` is missing in object type [1] but exists in object type [2].
[prop-missing]

   type.js:55:2
   55| (o5: {x: X, y?: Y}); // Error: x is optional and y is not in O5
        ^^

References:
   type.js:50:17
   50| declare var o5: O5;
                       ^^ [1]
   type.js:55:6
   55| (o5: {x: X, y?: Y}); // Error: x is optional and y is not in O5
            ^^^^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- type.js:55:2

Cannot cast `o5` to object type because undefined [1] is incompatible with `X` [2] in property `x`. [incompatible-cast]

   type.js:55:2
   55| (o5: {x: X, y?: Y}); // Error: x is optional and y is not in O5
        ^^

References:
   type.js:49:21
   49| type O5 = $Rest<{x: X, y: Y}, {|y: Y|}>;
                           ^ [1]
   type.js:55:10
   55| (o5: {x: X, y?: Y}); // Error: x is optional and y is not in O5
                ^ [2]


Error ----------------------------------------------------------------------------------------------------- type.js:56:2

Cannot cast `o5` to object type because property `y` is missing in object type [1] but exists in object type [2].
[prop-missing]

   type.js:56:2
   56| (o5: {x?: X, y?: Y}); // Error: y is not in O5
        ^^

References:
   type.js:50:17
   50| declare var o5: O5;
                       ^^ [1]
   type.js:56:6
   56| (o5: {x?: X, y?: Y}); // Error: y is not in O5
            ^^^^^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- type.js:57:2

Cannot cast `o5` to object type because `X` [1] is incompatible with `Y` [2] in property `x`. [incompatible-cast]

   type.js:57:2
   57| (o5: {x: Y}); // Error: x is optional and X = Y
        ^^

References:
   type.js:49:21
   49| type O5 = $Rest<{x: X, y: Y}, {|y: Y|}>;
                           ^ [1]
   type.js:57:10
   57| (o5: {x: Y}); // Error: x is optional and X = Y
                ^ [2]


Error ----------------------------------------------------------------------------------------------------- type.js:57:2

Cannot cast `o5` to object type because undefined [1] is incompatible with `Y` [2] in property `x`. [incompatible-cast]

   type.js:57:2
   57| (o5: {x: Y}); // Error: x is optional and X = Y
        ^^

References:
   type.js:49:21
   49| type O5 = $Rest<{x: X, y: Y}, {|y: Y|}>;
                           ^ [1]
   type.js:57:10
   57| (o5: {x: Y}); // Error: x is optional and X = Y
                ^ [2]


Error ----------------------------------------------------------------------------------------------------- type.js:61:6

Cannot cast object literal to `O5` because `Y` [1] is incompatible with `X` [2] in property `x`. [incompatible-cast]

   type.js:61:6
   61| ({x: y}: O5); // Error: Y ~> X
            ^

References:
   type.js:4:16
    4| declare var y: Y;
                      ^ [1]
   type.js:49:21
   49| type O5 = $Rest<{x: X, y: Y}, {|y: Y|}>;
                           ^ [2]


Error ----------------------------------------------------------------------------------------------------- type.js:65:2

Cannot cast `o6` to object type because inexact object type [1] is incompatible with exact object type [2].
[incompatible-exact]

   type.js:65:2
   65| (o6: {|x?: X, y?: Y|}); // Error: inexact ~> exact
        ^^

References:
   type.js:64:17
   64| declare var o6: O6;
                       ^^ [1]
   type.js:65:6
   65| (o6: {|x?: X, y?: Y|}); // Error: inexact ~> exact
            ^^^^^^^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- type.js:67:2

Cannot cast `o6` to object type because undefined [1] is incompatible with `X` [2] in property `x`. [incompatible-cast]

   type.js:67:2
   67| (o6: {x: X}); // Error: x is optional
        ^^

References:
   type.js:63:21
   63| type O6 = $Rest<{x: X, y: Y}, {y: Y}>;
                           ^ [1]
   type.js:67:10
   67| (o6: {x: X}); // Error: x is optional
                ^ [2]


Error ----------------------------------------------------------------------------------------------------- type.js:69:2

Cannot cast `o6` to object type because undefined [1] is incompatible with `X` [2] in property `x`. [incompatible-cast]

   type.js:69:2
   69| (o6: {x: X, y?: Y}); // Error: x is optional
        ^^

References:
   type.js:63:21
   63| type O6 = $Rest<{x: X, y: Y}, {y: Y}>;
                           ^ [1]
   type.js:69:10
   69| (o6: {x: X, y?: Y}); // Error: x is optional
                ^ [2]


Error ----------------------------------------------------------------------------------------------------- type.js:71:2

Cannot cast `o6` to object type because `X` [1] is incompatible with `Y` [2] in property `x`. [incompatible-cast]

   type.js:71:2
   71| (o6: {x: Y}); // Error: X = Y, x is optional
        ^^

References:
   type.js:63:21
   63| type O6 = $Rest<{x: X, y: Y}, {y: Y}>;
                           ^ [1]
   type.js:71:10
   71| (o6: {x: Y}); // Error: X = Y, x is optional
                ^ [2]


Error ----------------------------------------------------------------------------------------------------- type.js:71:2

Cannot cast `o6` to object type because undefined [1] is incompatible with `Y` [2] in property `x`. [incompatible-cast]

   type.js:71:2
   71| (o6: {x: Y}); // Error: X = Y, x is optional
        ^^

References:
   type.js:63:21
   63| type O6 = $Rest<{x: X, y: Y}, {y: Y}>;
                           ^ [1]
   type.js:71:10
   71| (o6: {x: Y}); // Error: X = Y, x is optional
                ^ [2]


Error ----------------------------------------------------------------------------------------------------- type.js:75:6

Cannot cast object literal to `O6` because `Y` [1] is incompatible with `X` [2] in property `x`. [incompatible-cast]

   type.js:75:6
   75| ({x: y}: O6); // Error: Y ~> X
            ^

References:
   type.js:4:16
    4| declare var y: Y;
                      ^ [1]
   type.js:63:21
   63| type O6 = $Rest<{x: X, y: Y}, {y: Y}>;
                           ^ [2]


Error ----------------------------------------------------------------------------------------------------- type.js:79:2

Cannot cast `o7` to object type because inexact object type [1] is incompatible with exact object type [2].
[incompatible-exact]

   type.js:79:2
   79| (o7: {|x?: X, y?: Y|}); // Error: inexact ~> exact
        ^^

References:
   type.js:78:17
   78| declare var o7: O7;
                       ^^ [1]
   type.js:79:6
   79| (o7: {|x?: X, y?: Y|}); // Error: inexact ~> exact
            ^^^^^^^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------------- type.js:81:2

Cannot cast `o7` to object type because undefined [1] is incompatible with `X` [2] in property `x`. [incompatible-cast]

   type.js:81:2
   81| (o7: {x: X}); // Error: x is optional
        ^^

References:
   type.js:77:21
   77| type O7 = $Rest<{x: X, y: Y}, {|y?: Y|}>;
                           ^ [1]
   type.js:81:10
   81| (o7: {x: X}); // Error: x is optional
                ^ [2]


Error ----------------------------------------------------------------------------------------------------- type.js:83:2

Cannot cast `o7` to object type because undefined [1] is incompatible with `X` [2] in property `x`. [incompatible-cast]

   type.js:83:2
   83| (o7: {x: X, y?: Y}); // Error: x is optional
        ^^

References:
   type.js:77:21
   77| type O7 = $Rest<{x: X, y: Y}, {|y?: Y|}>;
                           ^ [1]
   type.js:83:10
   83| (o7: {x: X, y?: Y}); // Error: x is optional
                ^ [2]


Error ----------------------------------------------------------------------------------------------------- type.js:85:2

Cannot cast `o7` to object type because `X` [1] is incompatible with `Y` [2] in property `x`. [incompatible-cast]

   type.js:85:2
   85| (o7: {x: Y}); // Error: X = Y and x is optional
        ^^

References:
   type.js:77:21
   77| type O7 = $Rest<{x: X, y: Y}, {|y?: Y|}>;
                           ^ [1]
   type.js:85:10
   85| (o7: {x: Y}); // Error: X = Y and x is optional
                ^ [2]


Error ----------------------------------------------------------------------------------------------------- type.js:85:2

Cannot cast `o7` to object type because undefined [1] is incompatible with `Y` [2] in property `x`. [incompatible-cast]

   type.js:85:2
   85| (o7: {x: Y}); // Error: X = Y and x is optional
        ^^

References:
   type.js:77:21
   77| type O7 = $Rest<{x: X, y: Y}, {|y?: Y|}>;
                           ^ [1]
   type.js:85:10
   85| (o7: {x: Y}); // Error: X = Y and x is optional
                ^ [2]


Error ----------------------------------------------------------------------------------------------------- type.js:89:6

Cannot cast object literal to `O7` because `Y` [1] is incompatible with `X` [2] in property `x`. [incompatible-cast]

   type.js:89:6
   89| ({x: y}: O7); // Error: Y ~> X
            ^

References:
   type.js:4:16
    4| declare var y: Y;
                      ^ [1]
   type.js:77:21
   77| type O7 = $Rest<{x: X, y: Y}, {|y?: Y|}>;
                           ^ [2]


Error ---------------------------------------------------------------------------------------------------- type.js:91:27

Cannot instantiate `$Rest` because `Y` [1] is incompatible with `X` [2]. [incompatible-type]

   type.js:91:27
   91| type O8 = $Rest<{x: X, y: Y}, {|y: X|}>; // Error: Y ~> X
                                 ^ [1]

References:
   type.js:91:36
   91| type O8 = $Rest<{x: X, y: Y}, {|y: X|}>; // Error: Y ~> X
                                          ^ [2]


Error ---------------------------------------------------------------------------------------------------- type.js:95:28

Cannot instantiate `$Rest` because `Y` [1] is incompatible with `X` [2]. [incompatible-type]

   type.js:95:28
   95| type O9 = $Rest<{|x: X, y: Y|}, {y: X}>; // Error: Y ~> X
                                  ^ [1]

References:
   type.js:95:37
   95| type O9 = $Rest<{|x: X, y: Y|}, {y: X}>; // Error: Y ~> X
                                           ^ [2]


Error ---------------------------------------------------------------------------------------------------- type.js:99:29

Cannot instantiate `$Rest` because `Y` [1] is incompatible with `X` [2]. [incompatible-type]

   type.js:99:29
   99| type O10 = $Rest<{|x: X, y: Y|}, {|y?: X|}>; // Error: Y ~> X
                                   ^ [1]

References:
   type.js:99:40
   99| type O10 = $Rest<{|x: X, y: Y|}, {|y?: X|}>; // Error: Y ~> X
                                              ^ [2]


Error --------------------------------------------------------------------------------------------------- type.js:103:30

Cannot instantiate `$Rest` because undefined [1] is incompatible with `Y` [2]. [incompatible-type]

   type.js:103:30
   103| type O11 = $Rest<{|x: X, y?: Y|}, {|y: Y|}>; // Error: void ~> Y
                                     ^ [1]

References:
   type.js:103:40
   103| type O11 = $Rest<{|x: X, y?: Y|}, {|y: Y|}>; // Error: void ~> Y
                                               ^ [2]


Error --------------------------------------------------------------------------------------------------- type.js:107:18

Cannot instantiate `$Rest` because undefined property `y` [1] is incompatible with `Y` [2]. [incompatible-type]

   type.js:107:18
   107| type O12 = $Rest<{|x: X|}, {|y: Y|}>; // Error: void ~> Y
                         ^^^^^^^^ [1]

References:
   type.js:107:33
   107| type O12 = $Rest<{|x: X|}, {|y: Y|}>; // Error: void ~> Y
                                        ^ [2]


Error ------------------------------------------------------------------------------------------------- type_dict.js:8:2

Cannot cast `o1` to object type because property `y` is missing in object type [1] but exists in object type [2].
[prop-missing]

   type_dict.js:8:2
   8| (o1: {||}); // Error: missing y
       ^^

References:
   type_dict.js:8:6
   8| (o1: {||}); // Error: missing y
           ^^^^ [1]
   type_dict.js:7:17
   7| declare var o1: O1;
                      ^^ [2]


Error ------------------------------------------------------------------------------------------------- type_dict.js:9:2

Cannot cast `o1` to object type because undefined [1] is incompatible with `Y` [2] in property `y`. [incompatible-cast]

   type_dict.js:9:2
   9| (o1: {|y: Y|}); // Error: y is optional
       ^^

References:
   type_dict.js:6:22
   6| type O1 = $Rest<{|y: Y|}, {|[string]: Y|}>;
                           ^ [1]
   type_dict.js:9:11
   9| (o1: {|y: Y|}); // Error: y is optional
                ^ [2]


Error ------------------------------------------------------------------------------------------------ type_dict.js:11:2

Cannot cast `o1` to object type because `Y` [1] is incompatible with `X` [2] in property `y`. [incompatible-cast]

   type_dict.js:11:2
   11| (o1: {|y?: X|}); // Error: Y = X
        ^^

References:
   type_dict.js:6:22
    6| type O1 = $Rest<{|y: Y|}, {|[string]: Y|}>;
                            ^ [1]
   type_dict.js:11:12
   11| (o1: {|y?: X|}); // Error: Y = X
                  ^ [2]


Error ------------------------------------------------------------------------------------------------ type_dict.js:14:6

Cannot cast object literal to `O1` because `X` [1] is incompatible with `Y` [2] in property `y`. [incompatible-cast]

   type_dict.js:14:6
   14| ({y: x}: O1); // Error: X ~> Y
            ^

References:
   type_dict.js:3:16
    3| declare var x: X;
                      ^ [1]
   type_dict.js:6:22
    6| type O1 = $Rest<{|y: Y|}, {|[string]: Y|}>;
                            ^ [2]


Error ----------------------------------------------------------------------------------------------- type_dict.js:16:22

Cannot instantiate `$Rest` because `Y` [1] is incompatible with `X` [2]. [incompatible-type]

   type_dict.js:16:22
   16| type O2 = $Rest<{|y: Y|}, {|[string]: X|}>; // Error: Y ~> X
                            ^ [1]

References:
   type_dict.js:16:39
   16| type O2 = $Rest<{|y: Y|}, {|[string]: X|}>; // Error: Y ~> X
                                             ^ [2]


Error ------------------------------------------------------------------------------------------------ type_dict.js:22:2

Cannot cast `o3` to object type because property `y` is missing in object type [1] but exists in object type [2].
[prop-missing]

   type_dict.js:22:2
   22| (o3: {||}); // Error: missing y
        ^^

References:
   type_dict.js:22:6
   22| (o3: {||}); // Error: missing y
            ^^^^ [1]
   type_dict.js:21:17
   21| declare var o3: O3;
                       ^^ [2]


Error ------------------------------------------------------------------------------------------------ type_dict.js:23:2

Cannot cast `o3` to object type because undefined [1] is incompatible with `Y` [2] in property `y`. [incompatible-cast]

   type_dict.js:23:2
   23| (o3: {|y: Y|}); // Error: y is optional
        ^^

References:
   type_dict.js:20:22
   20| type O3 = $Rest<{|y: Y|}, {[string]: Y}>;
                            ^ [1]
   type_dict.js:23:11
   23| (o3: {|y: Y|}); // Error: y is optional
                 ^ [2]


Error ------------------------------------------------------------------------------------------------ type_dict.js:25:2

Cannot cast `o3` to object type because `Y` [1] is incompatible with `X` [2] in property `y`. [incompatible-cast]

   type_dict.js:25:2
   25| (o3: {|y?: X|}); // Error: Y = X
        ^^

References:
   type_dict.js:20:22
   20| type O3 = $Rest<{|y: Y|}, {[string]: Y}>;
                            ^ [1]
   type_dict.js:25:12
   25| (o3: {|y?: X|}); // Error: Y = X
                  ^ [2]


Error ------------------------------------------------------------------------------------------------ type_dict.js:28:6

Cannot cast object literal to `O3` because `X` [1] is incompatible with `Y` [2] in property `y`. [incompatible-cast]

   type_dict.js:28:6
   28| ({y: x}: O3); // Error: X ~> Y
            ^

References:
   type_dict.js:3:16
    3| declare var x: X;
                      ^ [1]
   type_dict.js:20:22
   20| type O3 = $Rest<{|y: Y|}, {[string]: Y}>;
                            ^ [2]


Error ------------------------------------------------------------------------------------------------ type_dict.js:32:2

Cannot cast `o4` to object type because inexact object type [1] is incompatible with exact object type [2].
[incompatible-exact]

   type_dict.js:32:2
   32| (o4: {|y?: Y|}); // Error: inexact ~> exact
        ^^

References:
   type_dict.js:31:17
   31| declare var o4: O4;
                       ^^ [1]
   type_dict.js:32:6
   32| (o4: {|y?: Y|}); // Error: inexact ~> exact
            ^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ type_dict.js:34:2

Cannot cast `o4` to object type because undefined [1] is incompatible with `Y` [2] in property `y`. [incompatible-cast]

   type_dict.js:34:2
   34| (o4: {y: Y}); // Error: y is optional
        ^^

References:
   type_dict.js:30:21
   30| type O4 = $Rest<{y: Y}, {|[string]: Y|}>;
                           ^ [1]
   type_dict.js:34:10
   34| (o4: {y: Y}); // Error: y is optional
                ^ [2]


Error ------------------------------------------------------------------------------------------------ type_dict.js:36:2

Cannot cast `o4` to object type because `Y` [1] is incompatible with `X` [2] in property `y`. [incompatible-cast]

   type_dict.js:36:2
   36| (o4: {y?: X}); // Error: Y = X
        ^^

References:
   type_dict.js:30:21
   30| type O4 = $Rest<{y: Y}, {|[string]: Y|}>;
                           ^ [1]
   type_dict.js:36:11
   36| (o4: {y?: X}); // Error: Y = X
                 ^ [2]


Error ------------------------------------------------------------------------------------------------ type_dict.js:40:6

Cannot cast object literal to `O4` because `X` [1] is incompatible with `Y` [2] in property `y`. [incompatible-cast]

   type_dict.js:40:6
   40| ({y: x}: O4); // Error: X ~> Y
            ^

References:
   type_dict.js:3:16
    3| declare var x: X;
                      ^ [1]
   type_dict.js:30:21
   30| type O4 = $Rest<{y: Y}, {|[string]: Y|}>;
                           ^ [2]


Error ------------------------------------------------------------------------------------------------ type_dict.js:44:2

Cannot cast `o5` to object type because inexact object type [1] is incompatible with exact object type [2].
[incompatible-exact]

   type_dict.js:44:2
   44| (o5: {|y?: Y|}); // Error: inexact ~> exact
        ^^

References:
   type_dict.js:43:17
   43| declare var o5: O5;
                       ^^ [1]
   type_dict.js:44:6
   44| (o5: {|y?: Y|}); // Error: inexact ~> exact
            ^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ type_dict.js:46:2

Cannot cast `o5` to object type because undefined [1] is incompatible with `Y` [2] in property `y`. [incompatible-cast]

   type_dict.js:46:2
   46| (o5: {y: Y}); // Error: y is optional
        ^^

References:
   type_dict.js:42:21
   42| type O5 = $Rest<{y: Y}, {[string]: Y}>;
                           ^ [1]
   type_dict.js:46:10
   46| (o5: {y: Y}); // Error: y is optional
                ^ [2]


Error ------------------------------------------------------------------------------------------------ type_dict.js:48:2

Cannot cast `o5` to object type because `Y` [1] is incompatible with `X` [2] in property `y`. [incompatible-cast]

   type_dict.js:48:2
   48| (o5: {y?: X}); // Error: Y = X
        ^^

References:
   type_dict.js:42:21
   42| type O5 = $Rest<{y: Y}, {[string]: Y}>;
                           ^ [1]
   type_dict.js:48:11
   48| (o5: {y?: X}); // Error: Y = X
                 ^ [2]


Error ------------------------------------------------------------------------------------------------ type_dict.js:52:6

Cannot cast object literal to `O5` because `X` [1] is incompatible with `Y` [2] in property `y`. [incompatible-cast]

   type_dict.js:52:6
   52| ({y: x}: O5); // Error: X ~> Y
            ^

References:
   type_dict.js:3:16
    3| declare var x: X;
                      ^ [1]
   type_dict.js:42:21
   42| type O5 = $Rest<{y: Y}, {[string]: Y}>;
                           ^ [2]


Error ----------------------------------------------------------------------------------------------- type_dict.js:54:21

Cannot instantiate `$Rest` because `Y` [1] is incompatible with `X` [2]. [incompatible-type]

   type_dict.js:54:21
   54| type O6 = $Rest<{y: Y}, {|[string]: X|}>; // Error: Y ~> X
                           ^ [1]

References:
   type_dict.js:54:37
   54| type O6 = $Rest<{y: Y}, {|[string]: X|}>; // Error: Y ~> X
                                           ^ [2]


Error ----------------------------------------------------------------------------------------------- type_dict.js:58:22

Cannot instantiate `$Rest` because `Y` [1] is incompatible with `X` [2]. [incompatible-type]

   type_dict.js:58:22
   58| type O7 = $Rest<{|y: Y|}, {[string]: X}>; // Error: Y ~> X
                            ^ [1]

References:
   type_dict.js:58:38
   58| type O7 = $Rest<{|y: Y|}, {[string]: X}>; // Error: Y ~> X
                                            ^ [2]


Error ----------------------------------------------------------------------------------------------- type_dict.js:82:30

Cannot instantiate `$Rest` because `X` [1] is incompatible with `Y` [2]. [incompatible-type]

   type_dict.js:82:30
   82| type O13 = $Rest<{|[string]: X|}, {|[string]: Y|}>; // Error: X ~> Y
                                    ^ [1]

References:
   type_dict.js:82:47
   82| type O13 = $Rest<{|[string]: X|}, {|[string]: Y|}>; // Error: X ~> Y
                                                     ^ [2]


Error ----------------------------------------------------------------------------------------------- type_dict.js:94:30

Cannot instantiate `$Rest` because `X` [1] is incompatible with `Y` [2]. [incompatible-type]

   type_dict.js:94:30
   94| type O16 = $Rest<{|[string]: X|}, {|y: Y|}>; // Error: X ~> Y and void ~> Y
                                    ^ [1]

References:
   type_dict.js:94:40
   94| type O16 = $Rest<{|[string]: X|}, {|y: Y|}>; // Error: X ~> Y and void ~> Y
                                              ^ [2]


Error ----------------------------------------------------------------------------------------------- type_dict.js:94:30

Cannot instantiate `$Rest` because undefined [1] is incompatible with `Y` [2]. [incompatible-type]

   type_dict.js:94:30
   94| type O16 = $Rest<{|[string]: X|}, {|y: Y|}>; // Error: X ~> Y and void ~> Y
                                    ^ [1]

References:
   type_dict.js:94:40
   94| type O16 = $Rest<{|[string]: X|}, {|y: Y|}>; // Error: X ~> Y and void ~> Y
                                              ^ [2]


Error ----------------------------------------------------------------------------------------------- type_dict.js:100:2

Cannot cast `o17` to object type because `Y` [1] is incompatible with `X` [2] in property `x`. This property is
invariantly typed. See https://flow.org/en/docs/faq/#why-cant-i-pass-a-string-to-a-function-that-takes-a-string-number.
[incompatible-cast]

   type_dict.js:100:2
   100| (o17: {|[string]: Y | void|}); // OK
         ^^^

References:
   type_dict.js:100:19
   100| (o17: {|[string]: Y | void|}); // OK
                          ^ [1]
   type_dict.js:98:23
    98| type O17 = $Rest<{|x: X, [string]: Y|}, {|x: X, [string]: Y|}>;
                              ^ [2]


Error ----------------------------------------------------------------------------------------------- type_dict.js:100:2

Cannot cast `o17` to object type because undefined [1] is incompatible with `X` [2] in property `x`. This property is
invariantly typed. See https://flow.org/en/docs/faq/#why-cant-i-pass-a-string-to-a-function-that-takes-a-string-number.
[incompatible-cast]

   type_dict.js:100:2
   100| (o17: {|[string]: Y | void|}); // OK
         ^^^

References:
   type_dict.js:100:23
   100| (o17: {|[string]: Y | void|}); // OK
                              ^^^^ [1]
   type_dict.js:98:23
    98| type O17 = $Rest<{|x: X, [string]: Y|}, {|x: X, [string]: Y|}>;
                              ^ [2]


Error ----------------------------------------------------------------------------------------------- type_dict.js:100:2

Cannot cast `o17` to object type because in property `x`: [incompatible-cast]
 - Either `X` [1] is incompatible with `Y` [2].
 - Or `X` [1] is incompatible with undefined [3].

   type_dict.js:100:2
   100| (o17: {|[string]: Y | void|}); // OK
         ^^^

References:
   type_dict.js:98:23
    98| type O17 = $Rest<{|x: X, [string]: Y|}, {|x: X, [string]: Y|}>;
                              ^ [1]
   type_dict.js:100:19
   100| (o17: {|[string]: Y | void|}); // OK
                          ^ [2]
   type_dict.js:100:23
   100| (o17: {|[string]: Y | void|}); // OK
                              ^^^^ [3]


Error --------------------------------------------------------------------------------------------- type_generic.js:1:37

Cannot instantiate `$Rest` because `A` [1] is incompatible with `B` [2]. [incompatible-type]

   type_generic.js:1:37
   1| function remove<A, B>(a: A): [$Rest<A, {p: B}>, B] {
                                          ^ [1]

References:
   type_generic.js:1:44
   1| function remove<A, B>(a: A): [$Rest<A, {p: B}>, B] {
                                                 ^ [2]


Error --------------------------------------------------------------------------------------------- type_generic.js:2:10

Property `p` is missing in mixed [1]. [incompatible-use]

   type_generic.js:2:10
   2|   const {p, ...o} = a;
               ^

References:
   type_generic.js:1:26
   1| function remove<A, B>(a: A): [$Rest<A, {p: B}>, B] {
                               ^ [1]


Error --------------------------------------------------------------------------------------------- type_generic.js:2:16

mixed [1] is not an object. [not-an-object]

   type_generic.js:2:16
   2|   const {p, ...o} = a;
                     ^

References:
   type_generic.js:1:26
   1| function remove<A, B>(a: A): [$Rest<A, {p: B}>, B] {
                               ^ [1]


Error ---------------------------------------------------------------------------------------------- type_generic.js:7:2

Cannot cast `o` to object type because property `p` is missing in object type [1] but exists in object literal [2].
[prop-missing]

   type_generic.js:7:2
   7| (o: {|x: string|});
       ^

References:
   type_generic.js:7:5
   7| (o: {|x: string|});
          ^^^^^^^^^^^^^ [1]
   type_generic.js:6:34
   6| const [o, p] = remove<_, number>({x: 'foo', p: 42});
                                       ^^^^^^^^^^^^^^^^^ [2]


Error ---------------------------------------------------------------------------------------------- type_generic.js:7:2

Cannot cast `o` to object type because undefined [1] is incompatible with string [2] in property `x`.
[incompatible-cast]

   type_generic.js:7:2
   7| (o: {|x: string|});
       ^

References:
   type_generic.js:6:38
   6| const [o, p] = remove<_, number>({x: 'foo', p: 42});
                                           ^^^^^ [1]
   type_generic.js:7:10
   7| (o: {|x: string|});
               ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- type_union.js:12:2

Cannot cast object literal to `O1` because: [incompatible-cast]
 - Either property `x` is missing in object type [1] but exists in object literal [2].
 - Or property `x` is missing in object type [3] but exists in object literal [2].

   type_union.js:12:2
   12| ({x}: O1<X, Y>); // Error: x is not allowed
        ^^^ [2]

References:
   type_union.js:10:34
   10| type O1<X, Y> = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void|}>;
                                        ^^^^^^^^ [1]
   type_union.js:10:23
   10| type O1<X, Y> = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void|}>;
                             ^^^^^^^^ [3]


Error ----------------------------------------------------------------------------------------------- type_union.js:14:2

Cannot cast object literal to `O1` because: [incompatible-cast]
 - Either property `x` is missing in object type [1] but exists in object literal [2].
 - Or property `x` is missing in object type [3] but exists in object literal [2].

   type_union.js:14:2
   14| ({x, y}: O1<X, Y>); // Error: x is not allowed
        ^^^^^^ [2]

References:
   type_union.js:10:34
   10| type O1<X, Y> = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void|}>;
                                        ^^^^^^^^ [1]
   type_union.js:10:23
   10| type O1<X, Y> = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void|}>;
                             ^^^^^^^^ [3]


Error ----------------------------------------------------------------------------------------------- type_union.js:19:2

Cannot cast object literal to `O2` because: [incompatible-cast]
 - Either property `y` is missing in object type [1] but exists in object literal [2].
 - Or property `y` is missing in object type [3] but exists in object literal [2].

   type_union.js:19:2
   19| ({y}: O2<X, Y>); // Error: y is not allowed
        ^^^ [2]

References:
   type_union.js:16:34
   16| type O2<X, Y> = $Rest<{|x: X|} | {|y: Y|}, {|y: Y | void|}>;
                                        ^^^^^^^^ [1]
   type_union.js:16:23
   16| type O2<X, Y> = $Rest<{|x: X|} | {|y: Y|}, {|y: Y | void|}>;
                             ^^^^^^^^ [3]


Error ----------------------------------------------------------------------------------------------- type_union.js:20:2

Cannot cast object literal to `O2` because: [incompatible-cast]
 - Either property `x` is missing in object type [1] but exists in object literal [2].
 - Or property `y` is missing in object type [3] but exists in object literal [2].

   type_union.js:20:2
   20| ({x, y}: O2<X, Y>); // Error: y is not allowed
        ^^^^^^ [2]

References:
   type_union.js:16:34
   16| type O2<X, Y> = $Rest<{|x: X|} | {|y: Y|}, {|y: Y | void|}>;
                                        ^^^^^^^^ [1]
   type_union.js:16:23
   16| type O2<X, Y> = $Rest<{|x: X|} | {|y: Y|}, {|y: Y | void|}>;
                             ^^^^^^^^ [3]


Error ---------------------------------------------------------------------------------------------- type_union.js:22:17

Cannot instantiate `$Rest` because undefined property `y` [1] is incompatible with `Y` [2]. [incompatible-type]

   type_union.js:22:17
   22| type O3 = $Rest<{|x: X|} | {|y: Y|}, {|x: X, y: Y|}>; // Error: void ~> X and void ~> Y
                       ^^^^^^^^ [1]

References:
   type_union.js:22:49
   22| type O3 = $Rest<{|x: X|} | {|y: Y|}, {|x: X, y: Y|}>; // Error: void ~> X and void ~> Y
                                                       ^ [2]


Error ---------------------------------------------------------------------------------------------- type_union.js:22:28

Cannot instantiate `$Rest` because undefined property `x` [1] is incompatible with `X` [2]. [incompatible-type]

   type_union.js:22:28
   22| type O3 = $Rest<{|x: X|} | {|y: Y|}, {|x: X, y: Y|}>; // Error: void ~> X and void ~> Y
                                  ^^^^^^^^ [1]

References:
   type_union.js:22:43
   22| type O3 = $Rest<{|x: X|} | {|y: Y|}, {|x: X, y: Y|}>; // Error: void ~> X and void ~> Y
                                                 ^ [2]


Error ----------------------------------------------------------------------------------------------- type_union.js:27:2

Cannot cast object literal to `O4` because: [incompatible-cast]
 - Either property `x` is missing in object type [1] but exists in object literal [2].
 - Or property `x` is missing in object type [3] but exists in object literal [2].

   type_union.js:27:2
   27| ({x}: O4); // Error: x is not allowed
        ^^^ [2]

References:
   type_union.js:25:28
   25| type O4 = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void, y: Y | void|}>;
                                  ^^^^^^^^ [1]
   type_union.js:25:17
   25| type O4 = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void, y: Y | void|}>;
                       ^^^^^^^^ [3]


Error ----------------------------------------------------------------------------------------------- type_union.js:28:2

Cannot cast object literal to `O4` because: [incompatible-cast]
 - Either property `y` is missing in object type [1] but exists in object literal [2].
 - Or property `y` is missing in object type [3] but exists in object literal [2].

   type_union.js:28:2
   28| ({y}: O4); // Error: y is not allowed
        ^^^ [2]

References:
   type_union.js:25:28
   25| type O4 = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void, y: Y | void|}>;
                                  ^^^^^^^^ [1]
   type_union.js:25:17
   25| type O4 = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void, y: Y | void|}>;
                       ^^^^^^^^ [3]


Error ----------------------------------------------------------------------------------------------- type_union.js:29:2

Cannot cast object literal to `O4` because: [incompatible-cast]
 - Either property `x` is missing in object type [1] but exists in object literal [2].
 - Or property `x` is missing in object type [3] but exists in object literal [2].

   type_union.js:29:2
   29| ({x, y}: O4); // Error: x and y are not allowed
        ^^^^^^ [2]

References:
   type_union.js:25:28
   25| type O4 = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void, y: Y | void|}>;
                                  ^^^^^^^^ [1]
   type_union.js:25:17
   25| type O4 = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void, y: Y | void|}>;
                       ^^^^^^^^ [3]


Error ----------------------------------------------------------------------------------------------- type_union.js:32:2

Cannot cast `o` to `O5` because: [incompatible-cast]
 - Either property `x` is missing in object type [1] but exists in object type [2].
 - Or property `y` is missing in object type [1] but exists in object type [2].

   type_union.js:32:2
   32| (o: O5); // Error: missing x and missing y
        ^

References:
   type_union.js:5:16
    5| declare var o: {||};
                      ^^^^ [1]
   type_union.js:31:17
   31| type O5 = $Rest<{|x: X, y: Y|}, {|x: X|} | {|y: Y|}>;
                       ^^^^^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- type_union.js:35:2

Cannot cast object literal to `O5` because: [incompatible-cast]
 - Either property `y` is missing in object type [1] but exists in object literal [2].
 - Or property `x` is missing in object type [1] but exists in object literal [2].

   type_union.js:35:2
   35| ({x, y}: O5); // Error: x and y are not allowed together
        ^^^^^^ [2]

References:
   type_union.js:31:17
   31| type O5 = $Rest<{|x: X, y: Y|}, {|x: X|} | {|y: Y|}>;
                       ^^^^^^^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------- type_union.js:37:17

Cannot instantiate `$Rest` because undefined property `y` [1] is incompatible with `Y` [2]. [incompatible-type]

   type_union.js:37:17
   37| type O6 = $Rest<{|x: X|}, {|x: X|} | {|y: Y|}>; // Error: void ~> Y
                       ^^^^^^^^ [1]

References:
   type_union.js:37:43
   37| type O6 = $Rest<{|x: X|}, {|x: X|} | {|y: Y|}>; // Error: void ~> Y
                                                 ^ [2]


Error ----------------------------------------------------------------------------------------------- type_union.js:42:2

Cannot cast object literal to `O7` because property `x` is missing in object type [1] but exists in object literal [2].
[incompatible-cast]

   type_union.js:42:2
   42| ({x}: O7); // Error: x is not allowed
        ^^^ [2]

References:
   type_union.js:40:17
   40| type O7 = $Rest<{|y: Y|}, {|x: X | void|} | {|y: Y|}>;
                       ^^^^^^^^ [1]


Error ----------------------------------------------------------------------------------------------- type_union.js:44:2

Cannot cast object literal to `O7` because property `x` is missing in object type [1] but exists in object literal [2].
[incompatible-cast]

   type_union.js:44:2
   44| ({x, y}: O7); // Error: x is not allowed
        ^^^^^^ [2]

References:
   type_union.js:40:17
   40| type O7 = $Rest<{|y: Y|}, {|x: X | void|} | {|y: Y|}>;
                       ^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------- type_union.js:46:17

Cannot instantiate `$Rest` because undefined property `y` [1] is incompatible with `Y` [2]. [incompatible-type]

   type_union.js:46:17
   46| type O8 = $Rest<{|x: X|} | {|y: Y|}, {|x: X|} | {|y: Y|}>; // Error: void ~> X and void ~> Y
                       ^^^^^^^^ [1]

References:
   type_union.js:46:54
   46| type O8 = $Rest<{|x: X|} | {|y: Y|}, {|x: X|} | {|y: Y|}>; // Error: void ~> X and void ~> Y
                                                            ^ [2]


Error ---------------------------------------------------------------------------------------------- type_union.js:46:28

Cannot instantiate `$Rest` because undefined property `x` [1] is incompatible with `X` [2]. [incompatible-type]

   type_union.js:46:28
   46| type O8 = $Rest<{|x: X|} | {|y: Y|}, {|x: X|} | {|y: Y|}>; // Error: void ~> X and void ~> Y
                                  ^^^^^^^^ [1]

References:
   type_union.js:46:43
   46| type O8 = $Rest<{|x: X|} | {|y: Y|}, {|x: X|} | {|y: Y|}>; // Error: void ~> X and void ~> Y
                                                 ^ [2]


Error ----------------------------------------------------------------------------------------------- type_union.js:53:2

Cannot cast object literal to `O9` because: [incompatible-cast]
 - Either property `x` is missing in object type [1] but exists in object literal [2].
 - Or property `y` is missing in object type [3] but exists in object literal [2].
 - Or property `x` is missing in object type [3] but exists in object literal [2].

   type_union.js:53:2
   53| ({x, y}: O9); // Error: x and y are not allowed together
        ^^^^^^ [2]

References:
   type_union.js:49:28
   49| type O9 = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void|} | {|y: Y | void|}>;
                                  ^^^^^^^^ [1]
   type_union.js:49:17
   49| type O9 = $Rest<{|x: X|} | {|y: Y|}, {|x: X | void|} | {|y: Y | void|}>;
                       ^^^^^^^^ [3]


Error ---------------------------------------------------------------------------------------------------- value.js:4:10

Cannot assign `1` to `others.foo` because property `foo` is missing in rest of object pattern [1]. [prop-missing]

   value.js:4:10
   4|   others.foo = 1; // ERROR
               ^^^

References:
   value.js:3:13
   3|   const {...others} = empty;
                  ^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------------- value.js:8:10

Cannot assign `1` to `others.foo` because property `foo` is missing in rest of object pattern [1]. [prop-missing]

   value.js:8:10
   8|   others.foo = 1; // ERROR
               ^^^

References:
   value.js:7:13
   7|   const {...others} = null;
                  ^^^^^^ [1]


Error --------------------------------------------------------------------------------------------------- value.js:13:10

Cannot assign `1` to `others.foo` because property `foo` is missing in rest of object pattern [1]. [prop-missing]

   value.js:13:10
   13|   others.foo = 1; // ERROR
                ^^^

References:
   value.js:12:13
   12|   const {...others} = new C();
                   ^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------------- value.js:60:4

Cannot cast `rest.a` to empty because number [1] is incompatible with empty [2]. [incompatible-cast]

   value.js:60:4
   60|   (rest.a: empty); // ERROR
          ^^^^^^

References:
   value.js:54:9
   54|     +a: number,
               ^^^^^^ [1]
   value.js:60:12
   60|   (rest.a: empty); // ERROR
                  ^^^^^ [2]


Error ---------------------------------------------------------------------------------------------------- value.js:72:4

Cannot cast `rest.a` to empty because number [1] is incompatible with empty [2]. [incompatible-cast]

   value.js:72:4
   72|   (rest.a: empty); // ERROR
          ^^^^^^

References:
   value.js:66:9
   66|     +a: number;
               ^^^^^^ [1]
   value.js:72:12
   72|   (rest.a: empty); // ERROR
                  ^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- value.js:81:19

Cannot get rest of object type because property `a` is not readable. [cannot-read]

   81|   const {b: _, ...rest} = x; // ERROR
                         ^^^^


Error --------------------------------------------------------------------------------------------------- value.js:89:19

Cannot get rest of interface type because property `a` is not readable. [cannot-read]

   89|   const {b: _, ...rest} = x; // ERROR
                         ^^^^


Error --------------------------------------------------------------------------------------------------- value.js:97:19

Cannot get rest of object type because property `a` is not readable. [cannot-read]

   97|   const {b: _, ...rest} = x; // ERROR
                         ^^^^


Error -------------------------------------------------------------------------------------------------- value.js:105:19

Cannot get rest of object type because property `a` is not readable. [cannot-read]

   105|   const {b: _, ...rest} = x; // ERROR
                          ^^^^



Found 112 errors

Only showing the most relevant union/intersection branches.
To see all branches, re-run Flow with --show-all-branches
